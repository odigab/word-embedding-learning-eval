%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 9.0%%For: (GEORGIA COLLISTER) (REDMUSTARD)%%Title: (Col_Landscape.eps)%%CreationDate: 27/4/04 1:19 PM%%BoundingBox: 36 -179 565 -72%%HiResBoundingBox: 36.0288 -178.1626 564.3809 -72.2607%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (BLUE 072)%%+ (PANTONE 124)%%+ (PANTONE 186)%%CMYKCustomColor: 1 0.79 0 0 (BLUE 072)%%+ 0 0.275 1 0.06 (PANTONE 124)%%+ 0 0.91 0.66 0.06 (PANTONE 186)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 300 -132 300 -132%AI3_TileBox: 30 -858 568 -77%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 170.0787%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -160 292 0.6667 966 658 18 1 1 137 158 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 -858%%AI3_PaperRect:-28 811 567 -31%%AI3_Margin:28 -30 -29 31%AI7_GridSettings: 28.3465 10 28.3465 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_BS%_0 1 0.6 0 1 50 100 Bs0 0 1 0 1 50 0 %_BS%_0 0 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_BS%_0 0.08 0.67 0 1 50 14 Bs1 1 0 0 1 50 100 %_BS%_1 1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer0 J 0 j 3.6 w 4 M []0 d0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k([Registration]) Pc([Registration]) Pc1 g(K=0) Pc0 g(K=100) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.75 g(K=25) Pc0.5 g(K=50) Pc0.25 g(K=75) Pc0 g(K=100) PcBb2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Black & White) Pc0.25 0 0 0 k(C=25 M=0 Y=0 K=0) Pc0.5 0 0 0 k(C=50 M=0 Y=0 K=0) Pc0.75 0 0 0 k(C=75 M=0 Y=0 K=0) Pc1 0 0 0 k(C=100 M=0 Y=0 K=0) Pc0.25 0.25 0 0 k(C=25 M=25 Y=0 K=0) Pc0.5 0.5 0 0 k(C=50 M=50 Y=0 K=0) Pc0.75 0.75 0 0 k(C=75 M=75 Y=0 K=0) Pc1 1 0 0 k(C=100 M=100 Y=0 K=0) PcBb2 (Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Red & Yellow) Pc0 0.25 0 0 k(C=0 M=25 Y=0 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.75 0 0 k(C=0 M=75 Y=0 K=0) Pc0 1 0 0 k(C=0 M=100 Y=0 K=0) Pc0 0.25 0.25 0 k(C=0 M=25 Y=25 K=0) Pc0 0.5 0.5 0 k(C=0 M=50 Y=50 K=0) Pc0 0.75 0.75 0 k(C=0 M=75 Y=75 K=0) Pc0 1 1 0 k(C=0 M=100 Y=100 K=0) PcBb0 0 0 0 Bh2 (Yellow & Blue Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Yellow & Blue Radial) Pc0 0 0.25 0 k(C=0 M=0 Y=25 K=0) Pc0 0 0.5 0 k(C=0 M=0 Y=50 K=0) Pc0 0 0.75 0 k(C=0 M=0 Y=75 K=0) Pc0 0 1 0 k(C=0 M=0 Y=100 K=0) Pc0.25 0 0.25 0 k(C=25 M=0 Y=25 K=0) Pc0.5 0 0.5 0 k(C=50 M=0 Y=50 K=0) Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0) Pc1 0 1 0 k(C=100 M=0 Y=100 K=0) Pc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Yellow Stripe) Pc0.25 0.125 0 0 k(C=25 M=13 Y=0 K=0) Pc0.5 0.25 0 0 k(C=50 M=25 Y=0 K=0) Pc0.75 0.375 0 0 k(C=75 M=38 Y=0 K=0) Pc1 0.5 0 0 k(C=100 M=50 Y=0 K=0) Pc0.125 0.25 0 0 k(C=13 M=25 Y=0 K=0) Pc0.25 0.5 0 0 k(C=25 M=50 Y=0 K=0) Pc0.375 0.75 0 0 k(C=38 M=75 Y=0 K=0) Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0) Pc0 g(K=100) Pc0 0.25 0.125 0 k(C=0 M=25 Y=13 K=0) Pc0 0.5 0.25 0 k(C=0 M=50 Y=25 K=0) Pc0 0.75 0.375 0 k(C=0 M=75 Y=38 K=0) Pc0 1 0.5 0 k(C=0 M=100 Y=50 K=0) Pc0 0.125 0.25 0 k(C=0 M=13 Y=25 K=0) Pc0 0.25 0.5 0 k(C=0 M=25 Y=50 K=0) Pc0 0.375 0.75 0 k(C=0 M=38 Y=75 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0 0.25 0 k(C=13 M=0 Y=25 K=0) Pc0.25 0 0.5 0 k(C=25 M=0 Y=50 K=0) Pc0.375 0 0.75 0 k(C=38 M=0 Y=75 K=0) Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0) Pc0.25 0 0.125 0 k(C=25 M=0 Y=13 K=0) Pc0.5 0 0.25 0 k(C=50 M=0 Y=25 K=0) Pc0.75 0 0.375 0 k(C=75 M=0 Y=38 K=0) Pc1 0 0.5 0 k(C=100 M=0 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.25 0.125 0.125 0 k(C=25 M=13 Y=13 K=0) Pc0.5 0.25 0.25 0 k(C=50 M=25 Y=25 K=0) Pc0.75 0.375 0.375 0 k(C=75 M=38 Y=38 K=0) Pc1 0.5 0.5 0 k(C=100 M=50 Y=50 K=0) Pc0.25 0.25 0.125 0 k(C=25 M=25 Y=13 K=0) Pc0.5 0.5 0.25 0 k(C=50 M=50 Y=25 K=0) Pc0.75 0.75 0.375 0 k(C=75 M=75 Y=38 K=0) Pc1 1 0.5 0 k(C=100 M=100 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.25 0.125 0 k(C=13 M=25 Y=13 K=0) Pc0.25 0.5 0.25 0 k(C=25 M=50 Y=25 K=0) Pc0.375 0.75 0.375 0 k(C=38 M=75 Y=38 K=0) Pc0.5 1 0.5 0 k(C=50 M=100 Y=50 K=0) Pc0.125 0.25 0.25 0 k(C=13 M=25 Y=25 K=0) Pc0.25 0.5 0.5 0 k(C=25 M=50 Y=50 K=0) Pc0.375 0.75 0.75 0 k(C=38 M=75 Y=75 K=0) Pc0.5 1 1 0 k(C=50 M=100 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.125 0.25 0 k(C=13 M=13 Y=25 K=0) Pc0.25 0.25 0.5 0 k(C=25 M=25 Y=50 K=0) Pc0.375 0.375 0.75 0 k(C=38 M=38 Y=75 K=0) Pc0.5 0.5 1 0 k(C=50 M=50 Y=100 K=0) Pc0.25 0.125 0.25 0 k(C=25 M=13 Y=25 K=0) Pc0.5 0.25 0.5 0 k(C=50 M=25 Y=50 K=0) Pc0.75 0.375 0.75 0 k(C=75 M=38 Y=75 K=0) Pc1 0.5 1 0 k(C=100 M=50 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc(C=0 M=0 Y=0 K=0) Pc(C=0 M=0 Y=0 K=0) Pc(C=0 M=0 Y=0 K=0) Pc(C=0 M=0 Y=0 K=0) Pc(C=0 M=0 Y=0 K=0) Pc0 g(K=100) Pc(K=100) Pc(K=100) Pc1 0.79 0 0 (BLUE 072) 0 x(BLUE 072) Pc0 0.275 1 0.06 (PANTONE 124) 0 x(PANTONE 124) Pc0 0.91 0.66 0.06 (PANTONE 186) 0 x(PANTONE 186) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A*u0 O0 g0 J 0 j 1 w 4 M []0 d0 XR183.2334 -134.7783 m169.8979 -134.7783 L169.8979 -133.7739 L172.625 -133.5327 173.5215 -133.4526 173.5215 -130.0776 c173.5215 -108.9048 L170.9067 -109.0654 167.0591 -109.2666 166.312 -115.6948 c165.229 -115.6948 L165.3408 -107.6191 L187.7529 -107.6191 L187.8276 -115.6948 L186.7446 -115.6948 L185.9976 -109.2666 182.1499 -109.0654 179.5728 -108.9048 c179.5728 -130.0776 L179.5728 -133.4927 180.4692 -133.5732 183.2334 -133.7739 C183.2334 -134.7783 lf*U*u208.939 -134.7783 m200.1611 -134.7783 L200.1611 -133.814 L201.3936 -133.6934 201.9165 -133.0107 201.9165 -131.5239 c201.9165 -121.8013 L201.9165 -120.6763 201.8794 -118.4668 199.8623 -118.4668 c198.3682 -118.4668 196.7617 -120.4355 196.7617 -120.7969 c196.7617 -131.5239 L196.7617 -132.4482 196.874 -133.6133 198.5923 -133.814 c198.5923 -134.7783 L189.5898 -134.7783 L189.5898 -133.814 L190.9346 -133.5327 191.5698 -133.3721 191.5698 -131.4038 c191.5698 -110.9136 L191.5698 -109.0254 191.0469 -108.9048 189.5898 -108.5835 c189.5898 -107.6191 L196.7617 -107.6191 L196.7617 -118.9087 L198.5547 -116.6587 200.1611 -115.7749 202.1035 -115.7749 c204.1577 -115.7749 207.1089 -117.0205 207.1089 -121.4399 c207.1089 -131.4038 L207.1089 -132.0864 207.1089 -133.814 208.939 -133.814 C208.939 -134.7783 lf*U*u225.6758 -130.3188 m223.3975 -134.0552 221.2681 -135.3408 218.2798 -135.3408 c214.5073 -135.3408 210.6973 -132.3677 210.6973 -125.4976 c210.6973 -119.5513 214.0962 -115.7749 218.3921 -115.7749 c224.8916 -115.7749 225.377 -122.7656 225.4893 -124.9351 c216.0762 -124.9351 L216.188 -128.3501 217.0098 -132.4482 220.5586 -132.4482 c222.7622 -132.4482 224.0698 -130.6802 224.7793 -129.7563 C225.6758 -130.3188 lf1 D220.8945 -123.4487 m220.8574 -122.2031 220.8574 -120.1138 220.5586 -118.9087 c220.3345 -118.0249 219.8486 -117.0205 218.5415 -117.0205 c217.1592 -117.0205 215.8892 -117.9043 215.8892 -123.4487 C220.8945 -123.4487 lf*U*u0 D261.4995 -108.6235 m259.4448 -108.9448 258.5859 -109.3867 258.5859 -112.0386 c258.5859 -124.855 L258.5859 -127.2251 258.063 -130.8008 256.4941 -132.6089 c254.6265 -134.7783 251.3765 -135.5415 249.1353 -135.5415 c247.4917 -135.5415 243.9805 -135.3008 241.5527 -133.0107 c239.9463 -131.4839 238.9751 -130.0776 238.9751 -125.7388 c238.9751 -112.3198 L238.9751 -108.9448 238.0039 -108.8647 235.9121 -108.6235 c235.9121 -107.6191 L248.5376 -107.6191 L248.5376 -108.6235 L246.0723 -108.7441 244.9146 -108.7842 244.9146 -112.3198 c244.9146 -125.7388 L244.9146 -128.0288 244.9146 -133.5732 250.2935 -133.5732 c256.8677 -133.5732 256.9424 -127.4263 256.9424 -124.855 c256.9424 -112.6011 L256.9424 -110.1504 256.4941 -108.7842 253.2817 -108.6235 c253.2817 -107.6191 L261.4995 -107.6191 L261.4995 -108.6235 lf*U*u281.3013 -134.7783 m272.5229 -134.7783 L272.5229 -133.814 L273.7559 -133.6934 274.2788 -133.0107 274.2788 -131.5239 c274.2788 -121.8013 L274.2788 -120.6763 274.2412 -118.4668 272.2241 -118.4668 c270.73 -118.4668 269.124 -120.4355 269.124 -120.7969 c269.124 -131.5239 L269.124 -132.4482 269.2358 -133.6133 270.9541 -133.814 c270.9541 -134.7783 L261.9521 -134.7783 L261.9521 -133.814 L263.2969 -133.5327 263.9316 -133.3721 263.9316 -131.4038 c263.9316 -119.5918 L263.9316 -117.7837 263.4463 -117.4624 261.9521 -117.2212 c261.9521 -116.2573 L269.0864 -116.2573 L269.0864 -119.1499 L269.1611 -119.1499 L269.6841 -118.1855 271.2905 -115.7749 274.4653 -115.7749 c276.52 -115.7749 279.4707 -117.0205 279.4707 -121.4399 c279.4707 -131.5239 L279.4707 -132.4883 279.4707 -133.7339 281.3013 -133.814 C281.3013 -134.7783 lf*U*u291.4634 -134.7783 m282.5361 -134.7783 L282.5361 -133.814 L283.8809 -133.4526 284.5161 -133.332 284.5161 -131.4038 c284.5161 -119.5918 L284.5161 -117.7837 283.9556 -117.5024 282.5361 -117.2212 c282.5361 -116.2573 L289.708 -116.2573 L289.708 -131.5239 L289.708 -132.7695 290.0068 -133.6533 291.4634 -133.814 C291.4634 -134.7783 lf287.0933 -107.0166 m288.6997 -107.0166 289.9697 -108.4229 289.9697 -110.1504 c289.9697 -111.918 288.6997 -113.2437 287.0933 -113.2437 c285.375 -113.2437 284.1797 -111.8779 284.1797 -110.1504 c284.1797 -108.4629 285.4126 -107.0166 287.0933 -107.0166 cf*U*u309.6885 -117.2212 m308.792 -117.3418 308.269 -117.4224 307.522 -119.4312 c301.5454 -135.3408 L300.5742 -135.3408 L296.0918 -123.4487 L295.27 -121.2793 294.1494 -118.7881 293.9253 -118.3062 c293.4771 -117.3818 293.29 -117.3818 292.3564 -117.2212 c292.3564 -116.2573 L301.6948 -116.2573 L301.6948 -117.2212 L300.4619 -117.3418 299.7148 -117.3818 299.7148 -118.3062 c299.7148 -118.4668 299.7148 -118.5874 300.0513 -119.5112 c303.002 -127.667 L305.6914 -120.355 L305.9531 -119.6719 306.1025 -119.0693 306.1025 -118.5469 c306.1025 -117.2617 304.9819 -117.2617 304.0479 -117.2212 c304.0479 -116.2573 L309.6885 -116.2573 L309.6885 -117.2212 lf*U*u325.793 -130.3188 m323.5146 -134.0552 321.3853 -135.3408 318.397 -135.3408 c314.6245 -135.3408 310.8145 -132.3677 310.8145 -125.4976 c310.8145 -119.5513 314.2134 -115.7749 318.5093 -115.7749 c325.0088 -115.7749 325.4941 -122.7656 325.6064 -124.9351 c316.1934 -124.9351 L316.3052 -128.3501 317.127 -132.4482 320.6758 -132.4482 c322.8794 -132.4482 324.187 -130.6802 324.8965 -129.7563 C325.793 -130.3188 lf1 D321.0117 -123.4487 m320.9746 -122.2031 320.9746 -120.1138 320.6758 -118.9087 c320.4517 -118.0249 319.9658 -117.0205 318.6587 -117.0205 c317.2764 -117.0205 316.0063 -117.9043 316.0063 -123.4487 C321.0117 -123.4487 lf*U*u0 D337.4834 -134.7783 m327.5479 -134.7783 L327.5479 -133.814 L328.7427 -133.5732 329.5645 -133.4126 329.5645 -131.4038 c329.5645 -119.5918 L329.5645 -117.583 328.668 -117.3818 327.5479 -117.2212 c327.5479 -116.2573 L334.6074 -116.2573 L334.6074 -119.4312 L334.6821 -119.4312 L335.4663 -118.1855 337.1475 -115.7749 339.5752 -115.7749 c342.1152 -115.7749 342.6758 -117.9443 342.6758 -118.9087 c342.6758 -119.9531 342.1528 -121.6006 340.2852 -121.6006 c338.1187 -121.6006 338.1563 -119.23 336.9604 -119.23 c336.4004 -119.23 334.7568 -120.1138 334.7568 -123.0469 c334.7568 -130.6401 L334.7568 -133.0908 335.2051 -133.6934 337.4834 -133.814 C337.4834 -134.7783 lf*U*u354.8145 -121.6807 m354.0303 -118.8286 352.312 -117.1006 350.1826 -117.1006 c348.8379 -117.1006 347.792 -118.1455 347.792 -119.3906 c347.792 -123.4888 356.5327 -122.5649 356.5327 -129.1538 c356.5327 -132.9707 354.1421 -135.3408 350.6685 -135.3408 c348.8008 -135.3408 346.2607 -134.1758 345.9243 -134.1758 c345.5137 -134.1758 345.2896 -134.4971 344.916 -135.3008 c343.9819 -135.3008 L343.9819 -128.6714 L345.0278 -128.6714 L345.252 -129.7563 346.1484 -133.9751 350.2949 -133.9751 c352.1626 -133.9751 352.9468 -132.5283 352.9468 -131.3232 c352.9468 -127.627 344.0566 -127.8682 344.0566 -121.6807 c344.0566 -118.1455 346.5596 -115.7749 349.9961 -115.7749 c351.7515 -115.7749 353.2832 -116.6587 353.9927 -116.6587 c354.665 -116.6587 354.8145 -116.1768 354.9268 -115.8555 c355.7485 -115.8555 L355.7485 -121.6807 L354.8145 -121.6807 lf*U*u367.1045 -134.7783 m358.1772 -134.7783 L358.1772 -133.814 L359.522 -133.4526 360.1572 -133.332 360.1572 -131.4038 c360.1572 -119.5918 L360.1572 -117.7837 359.5967 -117.5024 358.1772 -117.2212 c358.1772 -116.2573 L365.3491 -116.2573 L365.3491 -131.5239 L365.3491 -132.7695 365.6479 -133.6533 367.1045 -133.814 C367.1045 -134.7783 lf362.7344 -107.0166 m364.3408 -107.0166 365.6104 -108.4229 365.6104 -110.1504 c365.6104 -111.918 364.3408 -113.2437 362.7344 -113.2437 c361.0161 -113.2437 359.8208 -111.8779 359.8208 -110.1504 c359.8208 -108.4629 361.0532 -107.0166 362.7344 -107.0166 cf*U*u379.3535 -118.0249 m375.8418 -118.0249 L375.8418 -130.1177 L375.8418 -130.7607 375.8047 -132.4082 377.2988 -132.4082 c378.3823 -132.4082 379.0171 -131.1626 379.4282 -130.3188 c380.3618 -130.7607 L379.5771 -132.4883 378.2329 -135.2607 374.8706 -135.2607 c370.8369 -135.2607 370.6875 -131.8857 370.6499 -131.042 c370.6499 -118.0249 L368.7075 -118.0249 L368.7075 -116.9399 L370.6875 -115.1323 372.3682 -113.3643 374.9082 -109.4673 c375.8418 -109.4673 L375.8418 -116.2573 L379.3535 -116.2573 L379.3535 -118.0249 lf*U*u398.3232 -117.2212 m397.502 -117.3418 396.8667 -117.4224 396.1572 -119.4312 c390.5913 -135.3809 L388.7236 -140.7246 387.9395 -143.0146 384.4282 -143.0146 c382 -143.0146 380.9912 -141.1665 380.9912 -139.8809 c380.9912 -139.3184 381.2158 -137.2695 383.457 -137.2695 c385.1377 -137.2695 385.5488 -138.5952 385.5488 -139.3184 c385.5488 -139.6797 385.4365 -139.8809 385.4365 -140.0415 c385.4365 -140.2422 385.623 -140.7246 386.0713 -140.7246 c387.3413 -140.7246 388.2754 -138.314 388.5366 -137.4302 c389.209 -135.3008 L384.7266 -123.4487 L383.9048 -121.2793 382.7842 -118.7881 382.5605 -118.3062 c382.1118 -117.3818 381.9253 -117.3818 380.9912 -117.2212 c380.9912 -116.2573 L390.3296 -116.2573 L390.3296 -117.2212 L389.3584 -117.3018 388.3501 -117.3418 388.3501 -118.3062 c388.3501 -118.708 388.7607 -119.7524 389.0972 -120.6362 c391.7866 -128.0688 L394.3267 -120.355 L394.5508 -119.6719 394.7373 -119.1499 394.7373 -118.5469 c394.7373 -117.2617 393.6167 -117.2617 392.6831 -117.2212 c392.6831 -116.2573 L398.3232 -116.2573 L398.3232 -117.2212 lf*U*u417.0449 -115.7749 m421.9385 -115.7749 425.4497 -119.9937 425.4497 -125.5781 c425.4497 -130.9214 422.125 -135.3408 417.0449 -135.3408 c411.853 -135.3408 408.603 -130.8008 408.603 -125.5781 c408.603 -120.395 411.853 -115.7749 417.0449 -115.7749 cf1 D417.0825 -134.0952 m419.6597 -134.0952 419.9585 -130.6802 419.9585 -125.5781 c419.9585 -119.3906 419.3232 -117.0205 417.0449 -117.0205 c414.2808 -117.0205 414.0938 -120.998 414.0938 -125.5781 c414.0938 -129.917 414.0938 -134.0952 417.0825 -134.0952 cf*U*u0 D426.874 -133.814 m428.144 -133.6533 429.0034 -133.5327 429.0034 -131.4038 c429.0034 -118.0249 L426.874 -118.0249 L426.874 -116.2573 L429.0034 -116.2573 L429.0034 -112.3599 429.0405 -107.0166 435.8018 -107.0166 c438.0801 -107.0166 440.8818 -108.2622 440.8818 -111.0342 c440.8818 -112.4404 440.0225 -113.5249 438.5283 -113.5249 c436.9595 -113.5249 436.3247 -112.1592 436.3247 -111.3555 c436.3247 -110.271 437.1465 -109.6279 437.1465 -109.0254 c437.1465 -108.3823 436.4741 -108.2622 436.0259 -108.2622 c434.2329 -108.2622 434.1953 -110.271 434.1953 -111.3555 c434.1953 -116.2573 L437.4453 -116.2573 L437.4453 -118.0249 L434.1953 -118.0249 L434.1953 -130.6401 L434.1953 -133.4126 434.8306 -133.7339 437.2583 -133.814 c437.2583 -134.7783 L426.874 -134.7783 L426.874 -133.814 lf*U*u467.0269 -115.6948 m466.3545 -112.8823 464.1133 -108.2622 459.7056 -108.2622 c457.7632 -108.2622 455.709 -109.4673 455.709 -112.0786 c455.709 -114.2485 456.4185 -115.1323 459.5562 -116.8193 c465.0474 -119.7524 L466.3174 -120.4355 469.1563 -122.7656 469.1563 -127.145 c469.1563 -130.6802 466.7656 -135.5415 459.8926 -135.5415 c456.3438 -135.5415 454.6631 -134.1758 453.5049 -134.1758 c452.7207 -134.1758 452.5337 -134.8989 452.3843 -135.5415 c451.3013 -135.5415 L451.3013 -125.6182 L452.3843 -125.6182 L453.1313 -129.6758 455.2979 -134.2158 460.042 -134.2158 c464.5244 -134.2158 464.7109 -130.2383 464.7109 -129.7163 c464.7109 -127.0244 462.9556 -126.0601 460.5273 -124.8145 c458.0249 -123.5288 L451.6372 -120.2344 451.6372 -116.7793 451.6372 -114.9312 c451.6372 -112.4805 452.7954 -107.0166 459.8926 -107.0166 c462.8809 -107.0166 464.6362 -108.3423 465.7197 -108.3423 c466.5786 -108.3423 466.7656 -107.7397 466.9521 -106.9761 c468.0728 -106.9761 L468.0728 -115.6948 L467.0269 -115.6948 lf*U*u487.7603 -117.2212 m486.9385 -117.3418 486.3037 -117.4224 485.5938 -119.4312 c480.0283 -135.3809 L478.1606 -140.7246 477.376 -143.0146 473.8647 -143.0146 c471.437 -143.0146 470.4282 -141.1665 470.4282 -139.8809 c470.4282 -139.3184 470.6523 -137.2695 472.8936 -137.2695 c474.5747 -137.2695 474.9854 -138.5952 474.9854 -139.3184 c474.9854 -139.6797 474.8735 -139.8809 474.8735 -140.0415 c474.8735 -140.2422 475.0605 -140.7246 475.5083 -140.7246 c476.7783 -140.7246 477.7124 -138.314 477.9736 -137.4302 c478.646 -135.3008 L474.1636 -123.4487 L473.3418 -121.2793 472.2212 -118.7881 471.9971 -118.3062 c471.5488 -117.3818 471.3623 -117.3818 470.4282 -117.2212 c470.4282 -116.2573 L479.7666 -116.2573 L479.7666 -117.2212 L478.7954 -117.3018 477.7871 -117.3418 477.7871 -118.3062 c477.7871 -118.708 478.1978 -119.7524 478.5342 -120.6362 c481.2236 -128.0688 L483.7637 -120.355 L483.9878 -119.6719 484.1743 -119.1499 484.1743 -118.5469 c484.1743 -117.2617 483.0537 -117.2617 482.1201 -117.2212 c482.1201 -116.2573 L487.7603 -116.2573 L487.7603 -117.2212 lf*U*u508.2725 -133.9751 m503.6406 -134.5776 503.3047 -134.6177 500.9883 -135.3008 c500.9883 -132.689 L499.6436 -134.2158 498.5977 -135.3408 495.7964 -135.3408 c492.6963 -135.3408 489.2593 -131.9658 489.2593 -126.1001 c489.2593 -119.1094 492.9575 -115.7749 496.4688 -115.7749 c498.71 -115.7749 499.98 -117.2212 500.8765 -118.2661 c500.8765 -110.9136 L500.8765 -108.7842 500.0923 -108.7441 498.0376 -108.5835 c498.0376 -107.6191 L506.0684 -107.6191 L506.0684 -130.7207 L506.0684 -131.8052 506.1436 -132.9707 508.2725 -133.0508 C508.2725 -133.9751 lf1 D500.8765 -120.5156 m500.8765 -120.4756 500.0547 -118.0249 497.9629 -118.0249 c495.3105 -118.0249 494.7881 -121.6406 494.7881 -125.5376 c494.7881 -127.8682 494.7881 -133.0908 497.7759 -133.0908 c499.4941 -133.0908 500.8765 -130.7207 500.8765 -130.2788 C500.8765 -120.5156 lf*U*u0 D529.23 -134.7783 m520.4521 -134.7783 L520.4521 -133.814 L521.6846 -133.6934 522.2075 -133.0107 522.2075 -131.5239 c522.2075 -121.8013 L522.2075 -120.6763 522.1704 -118.4668 520.1533 -118.4668 c518.6592 -118.4668 517.0527 -120.4355 517.0527 -120.7969 c517.0527 -131.5239 L517.0527 -132.4482 517.165 -133.6133 518.8833 -133.814 c518.8833 -134.7783 L509.8809 -134.7783 L509.8809 -133.814 L511.2256 -133.5327 511.8608 -133.3721 511.8608 -131.4038 c511.8608 -119.5918 L511.8608 -117.7837 511.375 -117.4624 509.8809 -117.2212 c509.8809 -116.2573 L517.0156 -116.2573 L517.0156 -119.1499 L517.0903 -119.1499 L517.6133 -118.1855 519.2192 -115.7749 522.3945 -115.7749 c524.4487 -115.7749 527.3999 -117.0205 527.3999 -121.4399 c527.3999 -131.5239 L527.3999 -132.4883 527.3999 -133.7339 529.23 -133.814 C529.23 -134.7783 lf*U*u545.7803 -130.3188 m543.5015 -134.0552 541.3721 -135.3408 538.3838 -135.3408 c534.6113 -135.3408 530.8013 -132.3677 530.8013 -125.4976 c530.8013 -119.5513 534.2007 -115.7749 538.4961 -115.7749 c544.9956 -115.7749 545.4814 -122.7656 545.5933 -124.9351 c536.1802 -124.9351 L536.292 -128.3501 537.1143 -132.4482 540.6626 -132.4482 c542.8667 -132.4482 544.1738 -130.6802 544.8838 -129.7563 C545.7803 -130.3188 lf1 D540.999 -123.4487 m540.9614 -122.2031 540.9614 -120.1138 540.6626 -118.9087 c540.4385 -118.0249 539.9531 -117.0205 538.6455 -117.0205 c537.2637 -117.0205 535.9932 -117.9043 535.9932 -123.4487 C540.999 -123.4487 lf*U*u0 D564.3809 -117.2212 m563.5591 -117.3418 562.9243 -117.4224 562.2144 -119.4312 c556.6489 -135.3809 L554.7813 -140.7246 553.9966 -143.0146 550.4854 -143.0146 c548.0576 -143.0146 547.0488 -141.1665 547.0488 -139.8809 c547.0488 -139.3184 547.2729 -137.2695 549.5142 -137.2695 c551.1953 -137.2695 551.606 -138.5952 551.606 -139.3184 c551.606 -139.6797 551.4941 -139.8809 551.4941 -140.0415 c551.4941 -140.2422 551.6807 -140.7246 552.1289 -140.7246 c553.3989 -140.7246 554.333 -138.314 554.5942 -137.4302 c555.2666 -135.3008 L550.7842 -123.4487 L549.9624 -121.2793 548.8418 -118.7881 548.6177 -118.3062 c548.1694 -117.3818 547.9829 -117.3818 547.0488 -117.2212 c547.0488 -116.2573 L556.3872 -116.2573 L556.3872 -117.2212 L555.416 -117.3018 554.4077 -117.3418 554.4077 -118.3062 c554.4077 -118.708 554.8184 -119.7524 555.1548 -120.6362 c557.8442 -128.0688 L560.3843 -120.355 L560.6084 -119.6719 560.7949 -119.1499 560.7949 -118.5469 c560.7949 -117.2617 559.6743 -117.2617 558.7407 -117.2212 c558.7407 -116.2573 L564.3809 -116.2573 L564.3809 -117.2212 lf*U1 g0 R1 G0.053 w136.4951 -99.3516 m136.4951 -98.8696 137.7744 -98.5068 138.5928 -98.3145 C138.0229 -97.3584 137.1602 -97.2886 136.9468 -97.2563 c136.2993 -97.1577 135.8887 -97.1387 134.7134 -98.4844 C135.1836 -96.0806 133.6162 -95.75 133.4761 -95.6797 c133.3545 -95.6191 132.6992 -95.6953 132.3623 -96.0806 C132.7954 -96.562 133.5576 -96.8955 133.7021 -97.7139 c133.8467 -98.5327 133.4614 -98.9658 133.0762 -99.8809 C132.9956 -99.9443 132.3223 -101.3472 131.9414 -102.1504 C132.1216 -101.4292 132.3701 -99.8975 132.3022 -99.625 c131.5181 -96.4902 128.2271 -95.8774 128.2759 -93.7354 c128.3042 -92.5088 128.5137 -92.4858 128.6445 -91.7876 c128.9409 -90.2021 127.8608 -89.0444 Y127.6475 -89.0747 126.8467 -89.1675 126.0679 -89.2417 C126.1494 -89.0474 L126.6235 -88.9917 127.0576 -88.9214 Y130.2202 -88.5503 131.1816 -86.8159 131.2573 -85.9092 c131.5181 -82.7744 129.064 -81.6606 127.2983 -81.6606 c125.3647 -81.6606 125.1543 -82.4922 125.0024 -83.0303 c124.7554 -83.9058 125.6919 -84.6997 126.3804 -84.7773 c126.729 -84.8169 127.9683 -85.0996 128.2524 -84.2549 c128.4043 -83.8042 128.416 -84.0156 128.7314 -84.4287 c129.0859 -84.8931 128.9736 -85.4561 128.5576 -85.7349 c128.0234 -86.0933 127.3384 -86.1709 126.293 -86.1709 c125.2642 -86.1709 123.9463 -85.9287 123.2505 -85.5537 c122.5552 -85.1797 121.4849 -84.1626 121.5386 -83.0391 c121.5923 -81.9155 122.9297 -81.3267 123.4111 -81.0059 C122.9297 -80.5244 122.4775 -80.478 121.6992 -80.5781 c120.2573 -80.7627 119.8799 -81.8618 119.8262 -82.29 c119.7729 -82.7183 120.3081 -83.5742 120.522 -83.7881 c120.7358 -84.002 120.9497 -84.1079 120.6289 -84.2163 c120.5049 -84.2583 120.27 -84.3687 119.8838 -83.9961 c118.8384 -82.9883 119.001 -81.7197 118.9702 -81.4341 c118.9185 -80.9517 118.8853 -78.9238 118.8096 -78.5449 c118.7251 -78.1191 118.3247 -77.3569 117.6826 -76.9824 C117.6353 -77.1948 117.3115 -79.0264 116.9907 -79.1333 C116.4023 -78.7051 115.5278 -76.7207 113.2988 -76.6187 c112.7642 -76.5938 112.6567 -76.7256 112.4429 -76.9932 C113.1382 -77.3677 114.3687 -79.3472 114.3154 -79.6685 C113.7642 -79.1377 112.0986 -79.0723 Y111.7397 -79.0723 113.0068 -80.0664 113.2744 -80.2803 c113.6987 -80.6201 114.665 -81.3486 115.1714 -81.6479 c115.7412 -81.9849 116.8301 -82.8252 Y116.937 -83.146 116.7764 -83.3066 V116.6968 -83.2236 115.9204 -82.8252 v115.0688 -82.3882 112.4395 -80.9585 111.854 -80.6313 c111.3579 -80.354 110.3232 -79.856 108.5718 -79.856 c106.3779 -79.856 105.5161 -81.5435 105.5161 -83.0952 c105.5161 -83.1636 105.5195 -83.2344 105.5225 -83.3052 C105.3682 -83.3872 L105.1563 -83.3042 L104.9844 -79.6821 104.8047 -78.3418 101.1514 -76.6421 C101.1182 -76.7412 102.1816 -79.0215 102.3228 -80.3154 c102.3765 -80.8091 102.3765 -80.8091 Y102.2251 -80.9473 101.8799 -80.8784 101.7285 -80.6396 c101.5991 -80.4355 99.5352 -77.4336 98.2822 -77.2358 C98.1836 -77.335 98.8101 -77.9614 99.0405 -78.4888 c99.1968 -78.8457 99.3203 -79.4932 99.0996 -79.6484 c98.7354 -79.9058 98.1997 -79.731 97.7935 -79.5054 c97.5815 -79.3877 96.2173 -78.6943 96.3252 -76.1548 C96.3887 -75.958 96.5771 -75.2358 97.5142 -75.0747 C97.3306 -74.5454 96.833 -74.3452 96.2632 -74.5142 c95.6416 -74.6978 95.083 -75.2905 94.7583 -75.3447 C94.4438 -74.6563 L94.0078 -73.1758 93.0317 -72.6304 V92.8662 -72.5972 L92.6509 -72.6431 L92.6509 -72.6431 L91.6748 -73.189 91.2056 -74.6377 Y90.8911 -75.3262 L90.5669 -75.272 90.0078 -74.6792 89.3862 -74.4956 c88.8169 -74.3271 88.3188 -74.5269 88.1357 -75.0562 C89.0723 -75.2178 89.2607 -75.9395 89.3242 -76.1367 C89.4326 -78.6763 88.0684 -79.3691 87.8564 -79.4868 c87.4497 -79.7124 86.9146 -79.8872 86.5503 -79.6304 c86.3296 -79.4746 86.4526 -78.8276 86.6089 -78.4702 c86.8398 -77.9429 87.4663 -77.3164 87.3672 -77.2173 C86.1143 -77.4155 84.0508 -80.417 83.9209 -80.6211 c83.7695 -80.8599 83.4248 -80.9287 83.2729 -80.791 C83.2729 -80.791 83.3267 -80.2969 v83.4683 -79.0034 84.5313 -76.7227 84.4985 -76.624 C81.0093 -78.2466 80.6885 -79.5425 80.5166 -82.811 C80.1265 -82.876 L80.0547 -81.3833 79.1777 -79.8379 77.0781 -79.8379 c75.3264 -79.8379 74.2917 -80.3354 73.7957 -80.6128 c73.2102 -80.9404 70.5808 -82.3701 69.7292 -82.8066 c68.9526 -83.2051 68.873 -83.2881 Y68.7126 -83.1279 68.8196 -82.8066 Y69.9084 -81.9663 70.4783 -81.6294 v70.9846 -81.3306 71.9509 -80.6016 72.3755 -80.2622 c72.6431 -80.0483 73.9099 -79.0537 73.551 -79.0537 C71.8855 -79.1191 71.3345 -79.6499 V71.2808 -79.3286 72.5115 -77.3491 73.2068 -76.9746 C72.9929 -76.707 72.8855 -76.5757 72.3508 -76.6001 c70.1221 -76.7026 69.2476 -78.687 68.6592 -79.1147 C68.3381 -79.0078 68.0144 -77.1763 67.9668 -76.9639 C67.3247 -77.3384 66.9246 -78.1006 66.8398 -78.5264 c66.7646 -78.9053 66.7312 -80.9331 66.6794 -81.4155 c66.6487 -81.7012 66.811 -82.9697 65.7659 -83.9775 c65.3794 -84.3501 65.145 -84.2397 65.0208 -84.1978 c64.7002 -84.0894 64.9136 -83.9839 65.1277 -83.77 c65.3418 -83.5557 65.8767 -82.6997 65.8232 -82.2715 c65.7698 -81.8438 65.3923 -80.7441 63.9504 -80.5596 c63.1721 -80.46 62.72 -80.5059 62.2383 -80.9878 C62.72 -81.3086 64.0576 -81.897 64.1111 -83.021 c64.1648 -84.1445 63.0945 -85.1611 62.3989 -85.5352 c61.7034 -85.9102 60.3857 -86.1523 59.3564 -86.1523 c58.3115 -86.1523 57.626 -86.0747 57.0923 -85.7168 c56.676 -85.4375 56.5637 -84.8745 56.9182 -84.4106 c57.2339 -83.9976 57.2454 -83.7856 57.397 -84.2363 c57.6812 -85.0815 58.9204 -84.7983 59.2693 -84.7588 c59.9575 -84.6812 60.8943 -83.8872 60.6472 -83.0122 c60.4956 -82.4741 60.2849 -81.6421 58.3513 -81.6421 c56.5857 -81.6421 54.1313 -82.7559 54.3926 -85.8911 c54.468 -86.7974 55.4292 -88.5322 58.5918 -88.9028 C59.0715 -88.9805 59.5725 -89.0376 V59.6174 -89.2266 L58.8276 -89.1519 58.0054 -89.0571 57.7888 -89.0259 C56.7085 -90.1836 57.0051 -91.769 v57.1357 -92.4673 57.3457 -92.4907 57.3735 -93.7168 c57.4224 -95.8594 54.1313 -96.4717 53.3474 -99.6069 c53.2793 -99.8789 53.5281 -101.4111 53.7085 -102.1323 C53.3271 -101.3291 52.6538 -99.9258 52.5735 -99.8628 C52.1885 -98.9478 51.8032 -98.5142 51.9478 -97.6958 c52.092 -96.877 52.8542 -96.5435 53.2876 -96.062 C52.9504 -95.6768 52.2949 -95.6006 52.1733 -95.6616 c52.0334 -95.7314 50.4661 -96.062 50.9365 -98.4663 C49.7607 -97.1201 49.3503 -97.1392 48.7026 -97.2378 c48.4895 -97.27 47.6267 -97.3403 47.0569 -98.2959 C47.8755 -98.4883 49.1548 -98.8516 49.1548 -99.333 C48.8174 -99.6699 47.6445 -100.6323 47.5657 -101.3071 c47.4402 -102.3765 47.9531 -102.6792 48.2397 -102.8003 C48.4805 -101.4517 49.0957 -100.8608 49.7327 -100.7773 c50.3064 -100.7026 50.9976 -100.6929 51.9478 -101.2109 c53.0071 -101.7891 53.9702 -102.6851 Y53.9646 -102.6738 53.9587 -102.6611 V54.323 -103.0679 55.2661 -103.7466 56.3521 -103.6563 c57.636 -103.5493 58.3115 -102.416 58.3115 -101.8276 c58.3115 -101.2388 57.7366 -100.8213 57.4155 -100.7676 c57.0945 -100.7139 56.6189 -100.7261 56.3035 -101.1543 c56.0908 -101.4434 55.8049 -101.5952 55.5969 -101.3271 c55.2639 -100.8979 55.5313 -100.3311 55.7683 -100.084 c56.0396 -99.8018 56.5361 -99.5488 57.2131 -99.5488 c57.6951 -99.5488 60.115 -100.2427 61.1851 -104.3091 c62.2554 -108.3755 61.8679 -110.25 61.7075 -111.2666 c61.5471 -112.2832 61.1724 -113.3535 60.6375 -113.9956 C60.5303 -113.9956 60.4768 -113.5137 V60.9048 -112.3901 61.012 -111.5342 60.5303 -110.0361 c60.0488 -108.5376 58.5476 -107.2202 58.3901 -106.5581 C58.2605 -106.3237 58.5728 -104.4399 Y56.3521 -104.5703 56.25 -106.772 v56.1863 -108.1494 54.6199 -104.5659 51.75 -106.3237 c50.5259 -107.0732 50.5784 -108.0562 50.6855 -108.4844 C51.3767 -108.2285 51.3735 -108.1709 52.1836 -108.1099 c52.7197 -108.0693 54.9658 -108.5913 55.0193 -109.7148 C53.8423 -109.9292 53.2537 -110.5176 52.9326 -111.106 c52.6116 -111.6948 52.6653 -112.1763 53.0933 -112.8716 C53.4678 -112.123 54.3379 -111.7026 55.6079 -111.5879 C57.9087 -111.5879 59.1155 -113.6118 59.1394 -115.1724 c59.1575 -116.3574 59.0471 -117.2266 58.5642 -118.0127 c58.2939 -118.4526 57.6812 -119.5581 55.4739 -119.3784 C54.8806 -119.2681 54.4885 -118.979 54.3701 -118.8545 c53.6643 -118.1094 54.1313 -116.98 Y54.1909 -117.916 55.5151 -118.2334 56.0908 -118.0249 c56.5105 -117.873 57.2429 -117.6108 57.1357 -116.3267 c57.0288 -115.0425 55.457 -113.8477 53.7549 -114.6636 C51.6565 -115.8296 51.7803 -119.0698 52.0413 -120.376 c52.283 -121.584 53.5837 -125.6279 53.4783 -127.0381 c53.1851 -130.9546 50.4658 -129.8774 50.2727 -129.7534 c50.093 -129.6377 49.7681 -129.4014 49.6519 -129.1738 C49.5276 -128.8701 49.459 -128.6772 49.4861 -128.3047 c49.5276 -127.7388 50.0796 -127.4214 49.9746 -127.7197 c49.7849 -128.2588 50.2864 -128.7251 50.4519 -128.7739 c51.0176 -128.9395 51.9973 -128.6743 51.9973 -127.7114 c51.9973 -126.748 51.2251 -126.0757 50.1233 -126.189 c48.1895 -126.3872 48.0493 -128.4258 48.0791 -129.0083 c48.0967 -129.3525 48.2585 -129.8774 48.4102 -130.0845 C48.416 -130.0801 L48.885 -130.8521 49.8516 -131.6377 50.7744 -131.8003 c53.1533 -132.2197 54.4392 -131.1191 54.853 -130.6636 C55.4463 -130.1255 55.9292 -128.9805 Y56.9224 -129.2979 57.5847 -131.0088 V58.0542 -132.605 57.4368 -133.8267 56.8486 -134.6196 C55.634 -133.686 55.7874 -131.9873 Y52.9214 -134.6782 53.5698 -137.0098 v53.6216 -137.1958 54.0251 -138.8584 56.3049 -139.3379 C56.6794 -139.1772 56.9983 -138.6006 57.3184 -138.5762 c58.0139 -138.5225 59.6321 -141.2417 59.999 -141.7974 c60.3784 -142.3843 61.1299 -143.4844 61.1299 -144.0195 c61.1299 -144.5547 58.8777 -142.9429 57.9951 -142.0601 c57.1121 -141.1772 57.3723 -140.2314 56.6235 -140.2314 C56.4629 -140.9268 56.5879 -141.4839 56.4275 -141.5376 c56.2668 -141.5908 54.6968 -139.9668 53.6265 -140.1812 c52.5564 -140.395 51.1726 -141.9697 51.333 -143.0396 C51.6843 -143.2935 53.3611 -142.3447 53.7888 -142.2891 c54.1689 -142.2393 54.6497 -142.3608 54.468 -142.8438 C54.04 -143.0581 52.6084 -144.7441 53.0313 -144.999 c53.4541 -145.2544 53.5837 -144.3633 56.6887 -144.4116 C58.6057 -144.5566 59.2351 -145.458 59.2141 -146.1528 c59.2012 -146.584 59.1206 -146.9858 58.866 -147.0674 c58.4041 -147.2153 57.7847 -147.231 56.0681 -146.8931 c54.5974 -146.604 54.573 -146.2842 54.6313 -146.9258 c54.6638 -147.2852 55.9048 -147.7417 55.9048 -148.3301 c55.9048 -148.9189 52.7561 -149.6836 55.1211 -152.9023 C56.3403 -154.2085 58.958 -154.2769 59.606 -153.9468 C59.7666 -153.626 57.7383 -152.6616 57.9951 -151.3779 c58.0386 -151.1602 58.4741 -150.1587 59.6931 -150.0718 c60.4302 -150.019 59.78 -151.5088 61.3479 -151.6392 C61.3479 -149.647 62.3708 -149.7344 Y62.926 -149.6362 64.2898 -150.1299 v65.2974 -150.4946 66.0557 -150.665 66.3767 -151.3608 c66.6978 -152.0562 66.4302 -151.7354 65.9487 -151.7354 c65.467 -151.7354 64.907 -151.3579 64.2649 -151.4653 c63.6228 -151.5723 62.9885 -152.2837 62.8281 -153.0327 c62.6675 -153.7817 62.5481 -155.4312 63.3506 -155.645 C63.7424 -154.0776 65.9631 -153.1631 v66.6084 -152.8975 67.5591 -152.9194 68.5757 -153.2939 c69.5923 -153.6685 73.2788 -155.4458 76.9707 -155.4458 c80.6626 -155.4458 83.1313 -152.7192 83.6055 -151.7007 c83.7368 -151.418 83.8345 -151.1479 83.917 -150.8833 C83.9585 -151.2559 84.2441 -151.8687 84.6558 -152.189 c85.1372 -152.5635 86.2163 -152.374 85.7349 -152.5342 c85.2534 -152.6948 83.3496 -153.459 83.3496 -153.8872 c83.3496 -154.3154 85.4141 -153.6045 85.5742 -153.7651 c85.7349 -153.9258 85.9219 -153.9653 85.439 -154.2964 c84.9697 -154.6182 81.8794 -155.1104 81.9126 -155.8467 c81.9438 -156.5493 82.0605 -158.3818 82.4351 -158.3286 C83.6108 -155.9771 88.1431 -154.6416 87.2329 -155.2632 C86.998 -155.5107 85.1353 -156.9316 85.7085 -157.7983 c85.9204 -158.1191 87.1216 -160.458 87.3354 -160.5112 c87.5498 -160.5645 87.0068 -156.2383 90.0688 -155.2095 c91.189 -154.833 86.7217 -158.2559 92.6128 -162.7124 C92.6973 -162.7402 92.6128 -162.7124 Y92.6973 -162.7402 L93.0366 -162.7305 L98.9277 -158.2744 94.4604 -154.8516 95.5811 -155.228 c98.6426 -156.2568 98.1001 -160.583 98.314 -160.5298 c98.5283 -160.4761 99.729 -158.1372 99.9414 -157.8164 c100.5142 -156.9502 98.6519 -155.5288 98.4165 -155.2813 C97.5068 -154.6597 102.0391 -155.9956 103.2148 -158.3467 C103.5894 -158.4004 103.7056 -156.5679 103.7373 -155.8652 c103.77 -155.1289 100.6797 -154.6367 100.2104 -154.3149 c99.728 -153.9839 99.915 -153.9438 100.0752 -153.7837 c100.2358 -153.623 102.3003 -154.3335 102.3003 -153.9058 c102.3003 -153.4775 100.3965 -152.7134 99.915 -152.5527 c99.4331 -152.3921 100.5127 -152.582 100.9941 -152.2075 c101.4058 -151.8872 101.6914 -151.2739 101.7324 -150.9019 C101.8154 -151.166 101.9126 -151.4365 102.0444 -151.7188 c102.5186 -152.7378 104.9873 -155.4644 108.6792 -155.4644 c112.3706 -155.4644 116.0576 -153.687 117.0737 -153.3125 c118.0903 -152.938 119.0415 -152.916 119.6865 -153.1816 c121.9072 -154.0962 122.2988 -155.6636 Y123.1016 -155.4497 122.9819 -153.8003 122.8213 -153.0513 c122.6611 -152.3018 122.0269 -151.5903 121.3843 -151.4834 c120.7427 -151.3765 120.1826 -151.7534 119.7012 -151.7534 c119.2197 -151.7534 118.9517 -152.0747 119.2729 -151.3789 c119.5938 -150.6836 120.3521 -150.5132 121.3599 -150.1484 c122.7236 -149.6548 123.2788 -149.7529 Y124.3018 -149.6655 124.3018 -151.6577 V125.8696 -151.5273 125.2197 -150.0376 125.9565 -150.0903 c127.1758 -150.1772 127.6113 -151.1787 127.6548 -151.3965 c127.9111 -152.6802 125.8828 -153.6445 126.0439 -153.9653 C126.6914 -154.2949 129.3091 -154.2266 130.5283 -152.9204 C132.8936 -149.7021 129.7446 -148.937 129.7446 -148.3486 c129.7446 -147.7598 130.9854 -147.3037 131.0181 -146.9443 c131.0767 -146.3027 131.0522 -146.6221 129.5815 -146.9116 c127.8652 -147.2495 127.2456 -147.2339 126.7837 -147.0859 c126.5288 -147.0044 126.4482 -146.6025 126.4355 -146.1714 c126.4146 -145.4761 127.0444 -144.5747 128.9609 -144.4297 C132.0659 -144.3818 132.1958 -145.2729 132.6187 -145.0176 c133.0415 -144.7622 131.6094 -143.0762 131.1816 -142.8623 C131 -142.3794 131.4805 -142.2578 131.8608 -142.3076 c132.2886 -142.3633 133.9653 -143.312 134.3164 -143.0581 C134.4771 -141.9883 133.0933 -140.4136 132.0229 -140.1992 c130.9531 -139.9854 129.3828 -141.6094 129.2222 -141.5562 c129.0615 -141.5024 129.1865 -140.9453 129.0264 -140.25 C128.2773 -140.25 128.5376 -141.1958 127.6548 -142.0786 c126.772 -142.9614 124.5195 -144.5728 124.5195 -144.0376 c124.5195 -143.5029 125.2715 -142.4028 125.6509 -141.8159 c126.0171 -141.2603 127.6357 -138.541 128.3311 -138.5942 c128.6514 -138.6191 128.9702 -139.1953 129.3447 -139.356 C131.6245 -138.877 132.0278 -137.2144 132.0796 -137.0283 c132.728 -134.6968 129.8623 -132.0054 Y130.0156 -133.7046 128.8013 -134.6377 V128.2129 -133.8452 127.5957 -132.623 128.0649 -131.0269 C128.7271 -129.3164 129.7207 -128.999 Y130.2036 -130.144 130.7964 -130.6821 V131.2104 -131.1377 132.4961 -132.2383 134.8755 -131.8188 c135.7983 -131.6563 136.7646 -130.8701 137.2334 -130.0986 C137.2393 -130.103 L137.3911 -129.8955 137.5532 -129.3711 137.5703 -129.0264 c137.6001 -128.4443 137.46 -126.4053 135.5264 -126.207 c134.4248 -126.0942 133.6523 -126.7666 133.6523 -127.73 c133.6523 -128.6929 134.6318 -128.9575 135.1978 -128.792 c135.3633 -128.7437 135.8647 -128.2773 135.6748 -127.7383 c135.5703 -127.4399 136.1221 -127.7573 136.1636 -128.3228 c136.1904 -128.6958 136.1221 -128.8887 135.998 -129.1924 C135.8813 -129.4199 135.5566 -129.6563 135.377 -129.7715 c135.1841 -129.8955 132.4644 -130.9731 132.1714 -127.0566 c132.0659 -125.6465 133.3667 -121.6025 133.6084 -120.3945 c133.8696 -119.0884 133.9932 -115.8477 131.8945 -114.6821 C130.1929 -113.8662 128.6211 -115.061 128.5137 -116.3452 c128.4067 -117.6294 129.1392 -117.8911 129.5591 -118.043 c130.1343 -118.252 131.459 -117.9346 131.5181 -116.9985 C131.9854 -118.1279 131.2793 -118.8726 v131.1611 -118.9976 130.769 -119.2866 130.1758 -119.397 C127.9683 -119.5762 127.3555 -118.4712 127.0854 -118.0313 c126.6025 -117.2446 126.4922 -116.3755 126.5103 -115.1909 c126.5342 -113.6299 127.7412 -111.606 130.042 -111.606 C131.312 -111.7212 132.1821 -112.1411 132.5566 -112.8901 C132.9844 -112.1948 133.0381 -111.7129 132.7168 -111.1245 c132.396 -110.5361 131.8076 -109.9473 130.6304 -109.7334 C130.6836 -108.6099 132.9297 -108.0879 133.4658 -108.1284 c134.2764 -108.1895 134.2729 -108.2471 134.9644 -108.5029 C135.0713 -108.0747 135.124 -107.0918 133.8994 -106.3418 c131.0298 -104.5845 129.4634 -108.168 129.3999 -106.7905 c129.2979 -104.5889 127.0771 -104.4585 Y127.3892 -106.3418 127.2593 -106.5767 V127.1021 -107.2388 125.6006 -108.5562 125.1196 -110.0542 c124.6377 -111.5527 124.7446 -112.4087 125.1729 -113.5322 C125.1196 -114.0137 125.0122 -114.0137 Y124.4771 -113.3716 124.1025 -112.3018 123.9424 -111.2852 c123.7817 -110.2686 123.3945 -108.394 124.4644 -104.3276 c125.5347 -100.2612 127.9546 -99.5674 128.4365 -99.5674 c129.1133 -99.5674 129.6104 -99.8203 129.8813 -100.1025 c130.1187 -100.3496 130.3857 -100.916 130.0527 -101.3457 c129.8447 -101.6138 129.5591 -101.4614 129.3462 -101.1729 c129.0308 -100.7446 128.5552 -100.7324 128.2339 -100.7861 c127.9131 -100.8394 127.3384 -101.2573 127.3384 -101.8457 c127.3384 -102.4341 128.0137 -103.5674 129.2979 -103.6748 c130.3833 -103.7651 131.3267 -103.0864 131.6909 -102.6797 C131.6851 -102.6919 131.6797 -102.7036 Y132.6426 -101.8071 133.7021 -101.2295 v134.6519 -100.7109 135.3433 -100.7207 135.917 -100.7959 c136.5542 -100.8794 137.1689 -101.4702 137.4097 -102.8184 C137.6963 -102.6978 138.2095 -102.3945 138.084 -101.3257 c138.0049 -100.6504 136.832 -99.6885 136.4951 -99.3516 Cb0 0.91 0.66 0.06 (PANTONE 186) 0 x0 0.91 0.66 0.06 (PANTONE 186) 0 X0.2612 w92.8423 -81.2993 m93.4585 -82.3818 94.9731 -83.2622 v96.0386 -83.8813 98.3564 -84.4277 y99.8403 -84.8071 102.5557 -85.0161 104.3882 -86.6792 c105.6377 -87.8135 106.6592 -88.3628 108.479 -88.2871 c110.2275 -88.2139 110.874 -87.3896 111.1128 -87.1143 c112.0596 -86.0215 111.8901 -85.0029 y112.6685 -85.2656 114.5483 -86.2607 114.8936 -86.4243 c115.5859 -86.752 120.6099 -89.6006 121.6299 -89.71 C121.103 -90.417 120.7007 -90.5112 120.355 -90.5112 c119.6265 -90.5112 118.1328 -90.2197 118.0601 -90.73 C117.8047 -92.5879 118.8613 -93.3892 v117.3003 -96.415 118.7939 -98.2729 V120.2876 -97.6899 120.5005 -97.3965 y120.355 -98.0884 120.519 -98.8989 121.1201 -98.8169 c121.4028 -98.7788 121.7397 -98.7988 121.9585 -98.9351 C120.2729 -99.8369 119.2349 -103.1978 v118.6157 -105.2007 118.5791 -107.6382 Y67.0132 -107.6382 L67.1316 -105.5586 66.4001 -103.2866 v65.333 -99.9707 63.7256 -98.9536 Y64.0898 -98.8081 64.2993 -98.7813 64.5825 -98.8169 c65.5125 -98.9351 65.2017 -97.7241 65.123 -97.4053 c66.8901 -98.2915 L68.3474 -95.9233 66.7625 -93.3984 y67.7971 -92.7515 67.6243 -90.7485 Y67.3298 -90.3804 66.2224 -90.5474 65.2688 -90.5205 c64.9468 -90.5112 64.4912 -90.3843 64.0542 -89.7285 C65.657 -89.2183 70.2817 -86.6914 70.5996 -86.4795 c70.9175 -86.2676 73.7339 -85.0117 y73.6816 -85.3447 73.9595 -86.3701 74.491 -87.1143 c75.043 -87.8872 76.1743 -88.3564 77.4419 -88.3232 c79.2632 -88.2764 80.0513 -87.7974 81.5581 -86.4653 c83.4121 -84.8271 87.0161 -84.5669 87.3867 -84.355 c89.7959 -83.8813 90.7383 -83.2622 v92.1533 -82.3325 92.8423 -81.2993 ybuuu1 O0 0.275 1 0.06 (PANTONE 124) 0 x1 R0 0.275 1 0.06 (PANTONE 124) 0 X0.4477 w136.0093 -129.1846 m135.8931 -129.4121 135.5684 -129.6484 135.3882 -129.7642 c135.1953 -129.8882 132.4756 -130.9658 132.1821 -127.0483 c132.0767 -125.6382 133.3779 -121.5933 133.6196 -120.3853 c133.8809 -119.0786 134.0044 -115.8374 131.9053 -114.6714 C130.2031 -113.8555 128.6309 -115.0508 128.5239 -116.335 c128.417 -117.6196 129.1494 -117.8813 129.5693 -118.0337 c130.145 -118.2422 131.4697 -117.9248 131.5288 -116.9883 c131.9961 -118.1182 131.29 -118.8628 v131.1719 -118.9878 130.7798 -119.2769 130.1865 -119.3872 C127.9785 -119.5669 127.3657 -118.4614 127.0952 -118.0215 c126.6123 -117.2349 126.502 -116.3657 126.52 -115.1807 c126.5439 -113.6196 127.751 -111.5952 130.0522 -111.5952 C131.3223 -111.71 132.1929 -112.1304 132.5674 -112.8794 C132.9956 -112.1836 133.0488 -111.7021 132.728 -111.1133 c132.4067 -110.5249 131.8184 -109.936 130.6411 -109.7222 C130.6943 -108.5981 132.9409 -108.0762 133.4771 -108.1167 c134.2876 -108.1777 134.2842 -108.2354 134.9756 -108.4912 C135.0825 -108.063 135.1353 -107.0801 133.9106 -106.3301 c131.0405 -104.5718 129.4736 -108.1563 129.4102 -106.7788 c129.3081 -104.5767 127.0869 -104.4458 Y127.3989 -106.3301 127.2695 -106.5645 V127.1118 -107.2266 125.6104 -108.5444 125.1289 -110.043 c124.647 -111.5415 124.7539 -112.3975 125.1821 -113.5215 C125.1289 -114.0034 125.022 -114.0034 Y124.4868 -113.3613 124.1118 -112.2905 123.9517 -111.2739 c123.791 -110.2573 123.4033 -108.3823 124.4741 -104.3154 c125.5444 -100.248 127.9648 -99.5542 128.4468 -99.5542 c129.124 -99.5542 129.6206 -99.8071 129.8916 -100.0894 c130.1289 -100.3364 130.396 -100.9033 130.063 -101.3325 c129.855 -101.6011 129.5693 -101.4487 129.3564 -101.1597 c129.041 -100.7314 128.5654 -100.7197 128.2441 -100.7729 c127.9233 -100.8267 127.3481 -101.2441 127.3481 -101.833 c127.3481 -102.4214 128.0234 -103.5552 129.3081 -103.6621 c130.5923 -103.769 131.6865 -102.7959 131.8467 -102.4751 c132.0073 -102.1538 132.396 -99.9443 132.313 -99.6118 c131.5288 -96.4761 128.2373 -95.8638 128.2861 -93.7212 c128.314 -92.4946 128.5239 -92.4712 128.6548 -91.7725 c128.9512 -90.187 127.8706 -89.0293 y127.4961 -89.0825 125.3081 -89.3281 124.6123 -89.3281 C124.0488 -90.6372 122.1919 -91.4473 v120.9854 -91.9731 120.457 -91.9189 119.708 -91.7046 C119.6548 -92.0791 119.8198 -92.2949 120.1895 -92.4902 c121.1064 -92.9741 120.9463 -93.3105 120.9463 -93.4712 c120.9463 -93.6318 119.6011 -94.4702 119.6011 -96.5039 C119.9756 -96.3965 121.7524 -94.5933 123.0366 -94.647 C123.3579 -94.9146 122.9272 -95.2559 122.7583 -95.6475 c122.5913 -96.0332 122.3301 -96.7178 122.3301 -97.3599 C122.9189 -97.0391 123.668 -96.5571 124.417 -96.5571 c125.1665 -96.5571 126.29 -97.2529 126.29 -97.6274 C125.4341 -98.3765 121.9556 -100.0894 121.0459 -103.5679 c120.1362 -107.0464 120.5107 -111.7554 121.3135 -114.0034 c122.1162 -116.251 123.6143 -119.3013 126.772 -120.4785 C127.8711 -120.8516 128.5938 -120.7349 128.8057 -120.6929 c129.4956 -120.5552 130.2505 -120.104 130.4644 -119.9971 C130.625 -120.2109 130.2559 -121.1367 129.6201 -122.2505 c129.2065 -122.9751 128.4751 -124.1479 126.626 -124.3413 C125.3154 -124.3687 124.6528 -122.7168 125.7256 -122.3672 C125.7153 -122.8647 125.8403 -123.0444 126.2539 -123.2651 c126.6035 -123.4512 127.0303 -123.2178 127.1909 -122.9502 c127.3516 -122.6826 127.3433 -121.9468 126.958 -121.6211 c126.6548 -121.3643 126.4507 -121.1206 125.5947 -121.1743 c124.7383 -121.228 123.4834 -122.8755 124.4741 -124.4355 c124.6943 -124.7827 125.25 -125.6577 126.502 -125.7622 c127.4102 -125.8384 128.9355 -125.2441 129.5376 -124.7139 c130.1172 -124.2031 130.1172 -123.9272 130.7856 -123.9033 C131.1602 -124.3315 129.5503 -125.667 129.2202 -125.873 c127.9316 -126.6758 127.3735 -126.7983 126.0415 -127.1792 c124.5845 -127.5957 124.4707 -128.292 124.0425 -129.3086 C124.6846 -129.3086 124.9058 -129.3628 125.4341 -129.4692 c125.9219 -129.5674 126.188 -129.853 126.2368 -130.0044 C126.6816 -131.4473 126.1431 -133.3516 125.9917 -134.4282 C126.1953 -134.9209 128.2822 -135.7251 128.8618 -134.6992 C128.2593 -133.9092 127.5923 -132.6616 128.0752 -131.0195 C128.7373 -129.3086 129.731 -128.9912 Y130.2139 -130.1367 130.8071 -130.6748 V131.2212 -131.1299 132.5073 -132.231 134.8867 -131.8115 c135.8574 -131.6406 136.8833 -130.7798 137.3203 -129.9712 cBU137.251 -130.0952 m137.4028 -129.8882 137.5649 -129.3633 137.5825 -129.019 c137.6123 -128.4365 137.4722 -126.397 135.5381 -126.1987 c134.436 -126.0859 133.6636 -126.7583 133.6636 -127.7217 c133.6636 -128.6851 134.6431 -128.9497 135.209 -128.7842 c135.375 -128.7358 135.876 -128.2695 135.6865 -127.7305 c135.5815 -127.4321 136.1333 -127.7495 136.1748 -128.3149 c136.2021 -128.688 136.1333 -128.8809 136.0093 -129.1846 cBU0 O0 R131.6904 -102.6909 m132.9741 -99.9565 133.0869 -99.8677 V133.4722 -98.9526 133.8579 -98.519 133.7129 -97.7002 c133.5688 -96.8818 132.8066 -96.5483 132.373 -96.0664 C132.71 -95.6812 133.3657 -95.605 133.4873 -95.666 c133.6274 -95.7358 135.1948 -96.0664 134.7246 -98.4712 C135.9004 -97.125 136.311 -97.144 136.9585 -97.2422 c137.1719 -97.2749 138.0347 -97.3447 138.605 -98.3008 C137.7861 -98.4932 136.5068 -98.8564 136.5068 -99.3379 C136.8438 -99.6753 138.0171 -100.6377 138.0962 -101.3125 c138.2212 -102.3818 137.7085 -102.6851 137.4219 -102.8057 C137.1807 -101.457 136.5654 -100.8662 135.9287 -100.7827 c135.3545 -100.7075 134.6636 -100.6982 133.7129 -101.2163 c132.6538 -101.7944 131.6904 -102.6909 ybU1 0.79 0 0 (BLUE 072) 0 x1 0.79 0 0 (BLUE 072) 0 X0.2613 w99.7622 -122.623 m122.2852 -122.623 L122.0552 -124.9644 123.3657 -126.082 123.9136 -126.3301 c122.207 -127.7378 122.3032 -130.7046 v124.1362 -130.3911 124.4697 -130.9116 v124.8403 -131.4893 124.249 -133.9473 123.9731 -134.7197 C123.1436 -134.7197 99.749 -134.7383 y99.749 -148.6382 L99.752 -148.9419 97.7754 -149.1851 96.5825 -149.6089 c95.8022 -149.8857 94.1128 -150.7266 92.8154 -152.3179 C91.3804 -150.7173 90.2046 -149.9419 89.3799 -149.6089 c88.3018 -149.1729 85.709 -148.937 85.7202 -148.6382 C85.7202 -147.6748 85.7202 -134.7153 y61.8789 -134.7153 L61.7458 -134.3374 61.4836 -133.2227 61.3821 -132.5674 C61.2441 -131.6563 61.3572 -131.0283 Y61.3269 -130.6904 62.302 -130.4331 63.406 -130.6904 C63.5898 -127.6548 61.7961 -126.3301 y62.8171 -125.7598 63.5898 -124.5088 63.4243 -122.6284 C64.2021 -122.6284 85.7344 -122.6284 y85.7344 -109.2319 l99.7622 -109.2319 l99.7622 -122.623 lb0 0.275 1 0.06 (PANTONE 124) 0.7 x1 w89.7949 -114.6567 m87.8901 -115.9233 L89.7734 -117.2227 L89.3159 -119.4741 L91.5605 -119.0527 L92.8188 -120.9697 L94.1094 -119.0742 L96.3462 -119.5347 L95.9341 -117.2231 L97.8384 -115.9536 L95.9492 -114.7095 L96.4307 -112.4214 L94.1621 -112.8799 L92.8154 -111 L91.6128 -112.8579 L89.376 -112.3979 L89.7949 -114.6567 Lf0 R0 0.275 1 0.06 (PANTONE 124) 0.7 X0.784 w103.3828 -125.5049 m105.3423 -125.5049 lS103.3828 -127.4526 m105.3423 -127.4526 lS103.3828 -129.4326 m105.3423 -129.4326 lS103.3828 -131.3926 m105.3423 -131.3926 lS0 O0 0.275 1 0.06 (PANTONE 124) 0.7 x1 w84.5747 -134.0254 m92.3325 -134.0254 l92.3325 -133.3677 l91.606 -132.6914 88.5884 -132.6914 V86.896 -132.8755 85.3135 -133.354 84.5747 -134.0254 cf101.0547 -134.0254 m93.2969 -134.0254 l93.2969 -133.3677 l94.0234 -132.6914 97.041 -132.6914 V98.7334 -132.8755 100.3159 -133.354 101.0547 -134.0254 cf1 g0.1569 w84.7993 -132.7017 m84.7993 -122.4834 l86.7251 -122.0269 87.5522 -122.0342 v88.5747 -122.0435 91.3345 -122.3379 92.3408 -123.144 C92.3408 -123.8433 92.3408 -132.3096 y90.6289 -131.8315 89.1636 -131.8315 v86.9189 -131.8315 84.7993 -132.7017 yF82.9033 -133.6323 m82.9033 -123.6084 l83.4233 -123.1108 83.8945 -122.9263 V83.8945 -123.4316 83.8945 -132.9717 y82.9893 -133.3989 82.9033 -133.6323 vf0 R1 0.79 0 0 (BLUE 072) 0 X0.4775 w87.2256 -129.8809 m88.7588 -129.3291 90.5659 -129.8994 yS87.2134 -128.1011 m88.7588 -127.6226 90.5571 -128.2158 yS87.2256 -126.4541 m88.5972 -126.1274 90.5571 -126.6665 yS87.2256 -124.751 m88.5972 -124.4243 90.5659 -125.0688 yS0 O0 0.275 1 0.06 (PANTONE 124) 0 x1 w43.6831 -143.4224 m37.6357 -146.5308 L35.949 -146.2012 35.2747 -143.8018 36.9236 -142.2813 C39.7561 -140.4878 43.2844 -139.0869 v47.7412 -137.3169 52.5793 -147.5967 49.5554 -150.5991 C49.3599 -150.8481 48.0354 -151.375 v47.3994 -151.6279 47.0498 -151.7749 Y45.8091 -150.9556 45.3647 -148.8511 45.8999 -148.1597 C45.5964 -148.2979 45.0232 -148.5786 44.8789 -149.2085 c44.083 -152.6807 48.5776 -157.5542 55.4763 -157.8467 c61.9893 -158.1226 67.0681 -157.3188 72.6418 -159.061 c78.2153 -160.8027 84.3462 -169.2031 92.8535 -169.2031 C92.8564 -178.1626 L80.2905 -178.1626 74.814 -169.1431 68.9265 -167.1563 c63.4712 -165.3149 56.4146 -167.3032 49.7383 -165.5371 c41.3296 -163.3125 36.8423 -156.0815 37.8691 -151.1865 C44.9893 -147.3872 L46.7063 -146.52 47.082 -146.959 47.0903 -147.666 c47.0991 -148.4121 47.1235 -150.1563 48.4795 -149.7886 C47.6018 -148.7764 48.5469 -147.1392 48.106 -146.2573 c47.7241 -145.4932 46.665 -145.2876 45.3167 -145.8403 C41.1992 -147.9482 L41.0889 -147.3228 40.7944 -146.8442 40.3528 -146.5684 C46.1128 -143.4961 L45.3953 -143.4224 42.8926 -142.2505 43.8044 -140.4131 C42.2112 -141.4355 42.6018 -142.7061 43.6831 -143.4224 Cf142.0254 -143.4224 m148.0728 -146.5308 L149.7593 -146.2012 150.4336 -143.8018 148.7847 -142.2813 C145.9521 -140.4878 142.4238 -139.0869 v137.9673 -137.3169 133.1289 -147.5967 136.1528 -150.5991 C136.3486 -150.8481 137.6729 -151.375 v138.3091 -151.6279 138.6587 -151.7749 Y139.8994 -150.9556 140.3438 -148.8511 139.8086 -148.1597 C140.1118 -148.2979 140.6851 -148.5786 140.8296 -149.2085 c141.6255 -152.6807 137.1309 -157.5542 130.2319 -157.8467 c123.7192 -158.1226 118.6401 -157.3188 113.0664 -159.061 c107.4927 -160.8027 101.3623 -169.2031 92.8545 -169.2031 C92.8521 -178.1626 L105.418 -178.1626 110.8945 -169.1431 116.7817 -167.1563 c122.2373 -165.3149 129.2939 -167.3032 135.9702 -165.5371 c144.3789 -163.3125 148.8662 -156.0815 147.8394 -151.1865 C140.7192 -147.3872 L139.002 -146.52 138.6265 -146.959 138.6182 -147.666 c138.6094 -148.4121 138.585 -150.1563 137.229 -149.7886 C138.1064 -148.7764 137.1616 -147.1392 137.6025 -146.2573 c137.9844 -145.4932 139.0435 -145.2876 140.3916 -145.8403 C144.5093 -147.9482 L144.6196 -147.3228 144.9141 -146.8442 145.3555 -146.5684 C139.5957 -143.4961 L140.313 -143.4224 142.8154 -142.2505 141.9038 -140.4131 C143.4971 -141.4355 143.1069 -142.7061 142.0254 -143.4224 Cf*u1 g0 R1 G0.1104 w40.1208 -155.1265 m41.3921 -154.3599 L41.4905 -154.5234 l41.1631 -154.8462 40.9746 -155.1631 40.925 -155.4736 c40.875 -155.7842 40.9304 -156.0718 41.0906 -156.3379 c41.2461 -156.5957 41.4165 -156.7432 41.6018 -156.7798 c41.7871 -156.8169 41.9456 -156.7954 42.0776 -156.7158 c42.2314 -156.623 42.3223 -156.4902 42.3503 -156.3174 c42.3682 -156.2036 42.3591 -156.0015 42.3232 -155.7114 C42.2668 -155.2432 l42.2104 -154.7793 42.2173 -154.4243 42.2878 -154.1782 c42.3582 -153.9321 42.511 -153.7378 42.7468 -153.5957 c42.9976 -153.4443 43.2913 -153.4023 43.6282 -153.4697 c43.9651 -153.5366 44.2571 -153.7754 44.5039 -154.1846 c44.6296 -154.3931 44.7229 -154.6118 44.7834 -154.8403 c44.8438 -155.0693 44.8826 -155.1978 44.8992 -155.2251 c44.937 -155.2881 44.9795 -155.3213 45.0266 -155.3257 c45.0735 -155.3301 45.1282 -155.3237 45.1907 -155.3062 C45.2925 -155.4746 L44.1741 -156.1494 L44.0791 -155.9917 l44.2925 -155.7598 44.4353 -155.4917 44.5073 -155.188 c44.5793 -154.8843 44.5332 -154.5957 44.3687 -154.3228 c44.2527 -154.1309 44.114 -154.0078 43.9524 -153.9531 c43.7908 -153.8984 43.6421 -153.9121 43.5066 -153.9937 c43.3445 -154.0918 43.2549 -154.2173 43.2383 -154.3706 c43.2185 -154.5234 43.2366 -154.8257 43.2925 -155.2773 C43.3591 -155.8184 l43.3882 -156.0596 43.385 -156.2681 43.3494 -156.4429 c43.2822 -156.77 43.1099 -157.0176 42.8325 -157.1846 c42.5732 -157.3408 42.2607 -157.3755 41.8948 -157.2881 c41.5283 -157.2012 41.1953 -156.9082 40.895 -156.4102 c40.8259 -156.2959 40.7659 -156.1743 40.7144 -156.0459 c40.6631 -155.917 40.6228 -155.7832 40.594 -155.645 C40.5649 -155.5112 l40.5559 -155.4814 40.5464 -155.4536 40.5361 -155.4268 c40.5259 -155.4004 40.5156 -155.3789 40.5056 -155.3623 c40.4702 -155.3032 40.4302 -155.272 40.386 -155.2686 c40.3418 -155.2651 40.2861 -155.272 40.2192 -155.29 C40.1208 -155.1265 lb*U*u42.9983 -159.0273 m43.1006 -158.9141 l43.2422 -159.0371 43.3557 -159.1123 43.4412 -159.1396 c43.582 -159.1826 43.7122 -159.1387 43.8313 -159.0068 C45.7771 -156.854 l45.8965 -156.7222 45.9292 -156.5913 45.8755 -156.4614 c45.8428 -156.3818 45.7556 -156.2725 45.6138 -156.1338 C45.7158 -156.021 L47.4319 -157.5723 L47.3296 -157.6851 l47.1711 -157.5522 47.0513 -157.4727 46.9702 -157.4468 c46.8337 -157.4053 46.7053 -157.4507 46.585 -157.584 C44.6389 -159.7368 l44.5264 -159.8613 44.4895 -159.979 44.5283 -160.0903 c44.5669 -160.2017 44.6631 -160.3267 44.8164 -160.4653 C44.7144 -160.5781 L42.9983 -159.0273 lb*U*u49.2874 -159.0903 m49.3362 -158.9775 49.385 -158.9082 49.4336 -158.8823 c49.5076 -158.8423 49.6233 -158.856 49.7815 -158.9248 c50.2598 -159.1318 50.5024 -159.5039 50.5093 -160.0405 c50.5129 -160.374 50.4304 -160.7354 50.2622 -161.124 c49.979 -161.7778 49.6721 -162.1694 49.3413 -162.2998 c49.0103 -162.4297 48.6648 -162.4165 48.3052 -162.2612 c48.1726 -162.2036 48.0972 -162.1411 48.0784 -162.0732 c48.0593 -162.0059 48.0715 -161.9141 48.1145 -161.7988 c49.2874 -159.0903 Lb1 D48.3245 -162.4927 m49.0183 -162.793 49.6519 -162.8369 50.2253 -162.6235 c50.7346 -162.4336 51.0972 -162.0898 51.313 -161.5913 c51.5532 -161.0361 51.5659 -160.5161 51.3511 -160.0317 c51.1143 -159.4995 50.6216 -159.0713 49.8726 -158.7471 c48.0166 -157.9434 L47.9563 -158.083 L48.1108 -158.165 48.2139 -158.2363 48.2651 -158.2969 c48.3535 -158.4009 48.3674 -158.5239 48.3062 -158.6655 c47.1311 -161.3794 L47.0674 -161.5264 46.9641 -161.6016 46.8218 -161.606 c46.7412 -161.6074 46.623 -161.5796 46.467 -161.5225 c46.4065 -161.6621 l48.3245 -162.4927 Lb*U*u0 D55.5251 -164.0249 m51.6892 -163.5381 L51.7083 -163.3867 l51.897 -163.4048 52.0334 -163.3989 52.1177 -163.3682 c52.2473 -163.3218 52.323 -163.2129 52.3445 -163.0425 C52.71 -160.1641 l52.7319 -159.9897 52.6838 -159.8647 52.5654 -159.7886 c52.4973 -159.7427 52.3689 -159.7026 52.1802 -159.6689 C52.1992 -159.5176 L55.981 -159.9976 L55.8286 -161.1973 L55.6685 -161.1768 l55.6338 -160.7832 55.5254 -160.5029 55.3438 -160.3359 c55.1619 -160.1694 54.8071 -160.0522 54.2793 -159.9854 c54.0786 -159.96 53.9485 -159.9624 53.8892 -159.9932 c53.8301 -160.0244 53.7932 -160.0957 53.7791 -160.2085 C53.6042 -161.585 l53.9775 -161.6362 54.2385 -161.6069 54.3872 -161.4971 c54.5356 -161.3872 54.6665 -161.168 54.7798 -160.8398 C54.9465 -160.8608 L54.6914 -162.8711 L54.5249 -162.8501 l54.5208 -162.5054 54.4556 -162.2544 54.3289 -162.0977 c54.2021 -161.9409 53.9519 -161.8389 53.5779 -161.7915 C53.3953 -163.2319 l53.3792 -163.3579 53.4041 -163.4482 53.47 -163.5029 c53.5356 -163.5576 53.6797 -163.5986 53.9019 -163.627 c54.3206 -163.6802 54.6719 -163.6499 54.9556 -163.5361 c55.239 -163.4229 55.5093 -163.1768 55.7656 -162.7979 C55.9482 -162.8213 L55.5251 -164.0249 lb*U*u58.4963 -160.4438 m58.4973 -160.3521 58.5254 -160.2866 58.5808 -160.2471 c58.636 -160.2075 58.752 -160.189 58.9287 -160.1904 c59.2539 -160.1938 59.4766 -160.3105 59.5969 -160.54 c59.6667 -160.6758 59.7002 -160.8594 59.698 -161.0918 c59.6941 -161.4702 59.5984 -161.7109 59.4109 -161.8135 c59.2234 -161.916 58.9136 -161.9678 58.4805 -161.9692 c58.4963 -160.4438 Lb1 D59.0403 -164.042 m59.042 -163.8901 L58.8096 -163.8799 58.6548 -163.8374 58.5781 -163.7637 c58.5015 -163.6895 58.4641 -163.5474 58.4663 -163.3364 c58.4785 -162.1626 L58.6528 -162.1641 L60.0063 -164.0522 L61.3599 -164.0664 L61.3613 -163.9229 L61.301 -163.9185 61.2505 -163.9087 61.2097 -163.8936 c61.1689 -163.8784 61.1306 -163.8472 61.0945 -163.7998 c59.7813 -162.0791 L60.0078 -162.0425 60.2229 -161.9551 60.427 -161.8164 c60.6938 -161.6318 60.8289 -161.3765 60.8323 -161.0508 c60.8369 -160.6094 60.5752 -160.3013 60.0471 -160.126 c59.7744 -160.0391 59.4175 -159.9937 58.9761 -159.9888 c56.8472 -159.9668 L56.8457 -160.1191 L57.0715 -160.1392 57.2166 -160.1729 57.2808 -160.2202 c57.377 -160.2915 57.4236 -160.4434 57.4214 -160.6758 c57.3938 -163.3252 L57.3916 -163.5479 57.3491 -163.6919 57.2666 -163.7573 c57.1841 -163.8228 57.0308 -163.8594 56.8066 -163.8667 c56.8049 -164.019 l59.0403 -164.042 Lb*U*u0 D65.8848 -164.1733 m62.0188 -164.0752 L62.0227 -163.9233 l62.2124 -163.9224 62.3474 -163.9023 62.4282 -163.8633 c62.5525 -163.8037 62.6169 -163.6885 62.6211 -163.5166 C62.6946 -160.6157 l62.699 -160.4404 62.6384 -160.3208 62.5132 -160.2568 c62.4407 -160.2178 62.3088 -160.1909 62.1174 -160.1763 C62.1216 -160.0244 L65.9324 -160.1206 L65.9019 -161.3296 L65.7402 -161.3257 l65.666 -160.937 65.53 -160.6689 65.3325 -160.5215 c65.1348 -160.374 64.77 -160.2935 64.2383 -160.2798 c64.0356 -160.2749 63.9067 -160.2905 63.8508 -160.3271 c63.7949 -160.3638 63.7654 -160.439 63.7627 -160.5518 C63.7275 -161.9395 l64.1042 -161.9531 64.3611 -161.8975 64.4978 -161.7729 c64.6343 -161.6484 64.7427 -161.4175 64.8223 -161.0796 C64.9902 -161.084 L64.939 -163.1094 L64.771 -163.1055 l64.7322 -162.7627 64.6421 -162.5195 64.5002 -162.3765 c64.3584 -162.2334 64.0991 -162.1567 63.7224 -162.1475 C63.6855 -163.5991 l63.6824 -163.7261 63.7163 -163.8135 63.7874 -163.8608 c63.8582 -163.9087 64.0056 -163.9355 64.2295 -163.9409 c64.6516 -163.9517 64.9978 -163.8862 65.2686 -163.7446 c65.5393 -163.603 65.7832 -163.3311 66.0002 -162.9287 C66.1843 -162.9331 L65.8848 -164.1733 lb*U*u68.8733 -164.4463 m68.9417 -164.3105 l69.1675 -164.4219 69.332 -164.4595 69.4348 -164.4229 c69.5376 -164.3857 69.6248 -164.2969 69.6958 -164.1558 C70.9763 -161.6143 l71.05 -161.4678 71.0601 -161.3521 71.0066 -161.2671 c70.9529 -161.1821 70.8313 -161.083 70.6423 -160.9707 C70.7109 -160.8345 L72.1995 -161.5845 L72.1133 -164.6489 L72.1624 -164.6738 L74.5684 -162.7778 L76.0571 -163.5278 L75.9883 -163.6636 l75.7813 -163.5771 75.6277 -163.5415 75.5281 -163.5581 c75.4282 -163.5742 75.3259 -163.6865 75.2214 -163.8936 C74.0293 -166.2603 l73.9299 -166.457 73.9016 -166.6045 73.9438 -166.7026 c73.9861 -166.8003 74.1057 -166.9033 74.3022 -167.0107 C74.2336 -167.1465 L72.2717 -166.1582 L72.3403 -166.0225 l72.5181 -166.1055 72.6631 -166.145 72.7759 -166.1416 c72.8882 -166.1382 72.9856 -166.0557 73.0671 -165.8936 C74.386 -163.2759 L74.3425 -163.2544 L71.3081 -165.6729 L71.1494 -165.5928 L71.2412 -161.7705 L71.2153 -161.7573 L69.9939 -164.1816 l69.9045 -164.3594 69.8755 -164.5078 69.9075 -164.6265 c69.9392 -164.7451 70.0779 -164.8716 70.3235 -165.0063 C70.2551 -165.1426 L68.8733 -164.4463 lb*U*u77.8516 -169.8066 m74.7703 -167.4697 L74.8623 -167.3481 l75.0168 -167.458 75.1382 -167.521 75.2266 -167.5361 c75.3621 -167.5605 75.4817 -167.5044 75.5857 -167.3677 C77.3389 -165.0557 l77.4453 -164.9155 77.4658 -164.7832 77.4014 -164.6577 c77.3652 -164.584 77.2739 -164.4854 77.127 -164.3618 C77.2192 -164.2407 L80.2568 -166.5439 L79.5259 -167.5078 L79.397 -167.4102 l79.564 -167.0513 79.6099 -166.7544 79.5356 -166.519 c79.4609 -166.2837 79.2119 -166.0054 78.7881 -165.6841 c78.627 -165.5615 78.5127 -165.499 78.4463 -165.4966 c78.3794 -165.4937 78.3115 -165.5371 78.2432 -165.6274 C77.4048 -166.7334 l77.7026 -166.9639 77.9434 -167.0688 78.127 -167.0479 c78.3105 -167.0264 78.5337 -166.9023 78.7954 -166.6743 C78.9292 -166.7759 L77.7051 -168.3906 L77.5713 -168.2891 l77.7397 -167.9883 77.8081 -167.7383 77.7769 -167.5391 c77.7451 -167.3403 77.5796 -167.1265 77.2793 -166.8989 C76.4014 -168.0562 l76.3247 -168.1572 76.3013 -168.248 76.3311 -168.3281 c76.3608 -168.4082 76.4648 -168.5161 76.6436 -168.6514 c76.98 -168.9063 77.2993 -169.0557 77.6016 -169.0986 c77.9043 -169.1416 78.2612 -169.0635 78.6724 -168.8633 C78.8188 -168.9746 L77.8516 -169.8066 lb*U*u78.4497 -170.3203 m78.5396 -170.1978 l78.7412 -170.3389 78.8936 -170.3984 78.998 -170.377 c79.1021 -170.355 79.1997 -170.2827 79.291 -170.1582 C80.9746 -167.8706 l80.9331 -167.5854 80.9038 -167.4141 80.8867 -167.3574 c80.8701 -167.2998 80.8315 -167.2432 80.7715 -167.187 C80.8618 -167.064 L81.9912 -167.8955 L82.3252 -171.2783 L82.3511 -171.2979 L83.4082 -169.8613 l83.5283 -169.6978 83.5815 -169.5571 83.5669 -169.4385 c83.5527 -169.3198 83.4517 -169.1807 83.2642 -169.021 C83.3545 -168.8984 L84.502 -169.7432 L84.4116 -169.8657 l84.2266 -169.7681 84.0903 -169.7202 84.0029 -169.7212 c83.915 -169.7217 83.8169 -169.7964 83.708 -169.9443 C81.6152 -172.7881 L81.4668 -172.6792 L81.0229 -168.3716 L80.9863 -168.3447 L79.5913 -170.2407 l79.4824 -170.3887 79.4282 -170.5098 79.4282 -170.6045 c79.4263 -170.7554 79.5327 -170.9165 79.7471 -171.0864 C79.6567 -171.209 L78.4497 -170.3203 lb*U*u82.98 -173.6284 m83.6489 -172.3032 L83.8188 -172.3892 l83.7134 -172.8364 83.7222 -173.2051 83.8452 -173.4946 c83.9683 -173.7842 84.168 -173.9985 84.4448 -174.1382 c84.7144 -174.2744 84.937 -174.3086 85.1133 -174.2412 c85.2896 -174.1738 85.4126 -174.0713 85.4819 -173.9336 c85.563 -173.7734 85.5693 -173.6123 85.501 -173.4512 c85.4556 -173.3452 85.3408 -173.1787 85.1558 -172.9521 C84.8594 -172.5864 l84.5649 -172.2231 84.3818 -171.9189 84.311 -171.6729 c84.2393 -171.4268 84.2656 -171.1812 84.3896 -170.9355 c84.5215 -170.6738 84.748 -170.4824 85.0693 -170.3604 c85.3901 -170.2378 85.7642 -170.2842 86.1909 -170.5 c86.4082 -170.6094 86.6035 -170.7451 86.7764 -170.9067 c86.9492 -171.0684 87.0503 -171.1563 87.0791 -171.1709 c87.1445 -171.2041 87.1982 -171.21 87.2402 -171.1885 c87.2827 -171.167 87.3252 -171.1323 87.3691 -171.0845 C87.5449 -171.1733 L86.9561 -172.3394 L86.792 -172.2563 l86.8496 -171.9463 86.8281 -171.6436 86.7275 -171.3477 c86.627 -171.0522 86.4346 -170.8325 86.1499 -170.689 c85.9502 -170.5879 85.7671 -170.5576 85.6011 -170.5972 c85.4351 -170.6372 85.3164 -170.7275 85.2451 -170.8687 c85.1597 -171.0376 85.1509 -171.1914 85.2183 -171.3306 c85.2827 -171.4702 85.4585 -171.7168 85.7461 -172.0693 C86.0903 -172.4922 l86.2432 -172.6812 86.3511 -172.8594 86.4141 -173.0264 c86.5313 -173.3394 86.5166 -173.6401 86.3706 -173.9297 c86.2344 -174.1997 85.9878 -174.395 85.6313 -174.5161 c85.2749 -174.6367 84.8374 -174.5659 84.3179 -174.3037 c84.1987 -174.2437 84.083 -174.1729 83.9712 -174.0913 c83.8594 -174.0093 83.7544 -173.9175 83.6563 -173.8154 C83.5605 -173.7183 l83.5371 -173.6978 83.5142 -173.6787 83.4912 -173.6621 c83.4683 -173.645 83.4482 -173.6323 83.4312 -173.6235 c83.3696 -173.5923 83.3193 -173.5874 83.2798 -173.6079 c83.2407 -173.6284 83.1973 -173.6636 83.1499 -173.7144 C82.98 -173.6284 lb*U*u94.3936 -175.6465 m90.5269 -175.603 L90.5283 -175.4507 l90.7178 -175.4473 90.8525 -175.4253 90.9331 -175.3853 c91.0562 -175.3242 91.1191 -175.208 91.1211 -175.0361 C91.1533 -172.1343 l91.1553 -171.9585 91.0933 -171.8398 90.9668 -171.7778 c90.894 -171.7402 90.7617 -171.7153 90.5703 -171.7031 C90.5723 -171.5508 L94.3838 -171.5938 L94.3706 -172.8032 L94.209 -172.8013 l94.1294 -172.4136 93.9893 -172.1475 93.79 -172.0029 c93.5898 -171.8579 93.2241 -171.7827 92.6924 -171.7769 c92.4897 -171.7744 92.3608 -171.792 92.3052 -171.8296 c92.25 -171.8672 92.2217 -171.9424 92.2207 -172.0557 C92.2051 -173.4434 l92.582 -173.4517 92.8379 -173.3926 92.9727 -173.2661 c93.1074 -173.1396 93.2124 -172.9072 93.2876 -172.5684 C93.4556 -172.5703 L93.4326 -174.5962 L93.2646 -174.5947 l93.2212 -174.2524 93.1274 -174.0107 92.9839 -173.8696 c92.8398 -173.728 92.5796 -173.6558 92.2026 -173.6514 C92.1865 -175.1035 l92.1851 -175.2305 92.2202 -175.3174 92.2915 -175.3638 c92.3633 -175.4106 92.5112 -175.4351 92.7354 -175.438 c93.1572 -175.4424 93.5024 -175.3721 93.7715 -175.2266 c94.04 -175.0815 94.2803 -174.8057 94.4912 -174.4004 C94.6758 -174.4023 L94.3936 -175.6465 lb*U*u96.4966 -172.5605 m96.5503 -172.5488 L97.4644 -173.7705 L96.208 -174.0439 l96.4966 -172.5605 Lb1 D96.6602 -175.3926 m96.6279 -175.2441 L96.48 -175.2744 96.3672 -175.2866 96.2891 -175.2817 c96.1567 -175.2705 96.0811 -175.2231 96.063 -175.1392 c96.0479 -175.0708 96.0527 -174.9546 96.0767 -174.7915 c96.0884 -174.7153 96.1167 -174.5503 96.1606 -174.2969 c97.6128 -173.981 L97.854 -174.2998 L97.9067 -174.3701 97.9497 -174.4307 97.9829 -174.4814 c98.0371 -174.5679 98.0688 -174.6338 98.0791 -174.6797 c98.1011 -174.7803 98.0815 -174.8506 98.0205 -174.8896 c97.9595 -174.9292 97.8247 -174.9756 97.6162 -175.0288 c97.6484 -175.1777 L99.7412 -174.7222 L99.709 -174.5732 L99.5625 -174.6094 99.438 -174.5859 99.3364 -174.5029 c99.2344 -174.4204 99.0654 -174.2241 98.8281 -173.9141 c96.7153 -171.1494 L96.5352 -171.1885 L95.7974 -174.7085 L95.7388 -174.9873 95.6875 -175.1699 95.6426 -175.2578 c95.5737 -175.3965 95.4624 -175.4878 95.3086 -175.5313 c95.3408 -175.6802 l96.6602 -175.3926 Lb*U*u0 D100.6055 -170.5444 m100.5552 -170.4321 100.5371 -170.3491 100.5513 -170.2959 c100.5713 -170.2144 100.6597 -170.1382 100.8169 -170.0679 c101.293 -169.855 101.7314 -169.9277 102.1318 -170.2852 c102.3799 -170.5073 102.5908 -170.812 102.7637 -171.1987 c103.0547 -171.8491 103.1362 -172.3403 103.0088 -172.6724 c102.8813 -173.0039 102.6382 -173.25 102.2808 -173.4102 c102.1489 -173.4692 102.0518 -173.4824 101.9893 -173.4507 c101.9263 -173.4189 101.8672 -173.3481 101.811 -173.2383 c100.6055 -170.5444 Lb1 D102.4648 -173.5522 m103.1548 -173.2437 103.6147 -172.8057 103.8447 -172.2388 c104.0488 -171.7349 104.04 -171.2354 103.8184 -170.7397 c103.5713 -170.1875 103.1963 -169.8271 102.6938 -169.6582 c102.1416 -169.4731 101.4927 -169.5474 100.7476 -169.8809 c98.9019 -170.707 L98.9639 -170.8457 L99.1289 -170.7871 99.2505 -170.7593 99.3301 -170.7622 c99.4668 -170.7676 99.5664 -170.8403 99.6294 -170.981 c100.8374 -173.6807 L100.9028 -173.8267 100.8887 -173.9536 100.7954 -174.0615 c100.7422 -174.1221 100.6416 -174.1904 100.4946 -174.2671 c100.5566 -174.4063 l102.4648 -173.5522 Lb*U*u0 D108.6348 -169.6357 m105.4688 -171.8564 L105.3813 -171.7319 l105.5332 -171.6182 105.6299 -171.522 105.6714 -171.4424 c105.7363 -171.3208 105.7192 -171.1899 105.6206 -171.0488 C103.9541 -168.6733 l103.8535 -168.5298 103.7334 -168.4697 103.5947 -168.4927 c103.5137 -168.5044 103.3916 -168.5615 103.229 -168.6636 C103.1416 -168.5391 L106.2627 -166.3496 L106.957 -167.3398 L106.8247 -167.4326 l106.5342 -167.1641 106.2651 -167.0298 106.0186 -167.0288 c105.772 -167.0278 105.4307 -167.1797 104.9951 -167.4854 c104.8296 -167.6016 104.7354 -167.6909 104.7119 -167.7539 c104.689 -167.8164 104.71 -167.894 104.7749 -167.9868 C105.5718 -169.123 l105.8828 -168.9102 106.0562 -168.7129 106.0918 -168.5313 c106.1279 -168.3501 106.0776 -168.0996 105.9409 -167.7808 C106.0781 -167.6846 L107.2417 -169.3433 L107.104 -169.4395 l106.8691 -169.1875 106.6523 -169.0459 106.4531 -169.0146 c106.2539 -168.9844 106 -169.0771 105.6914 -169.2935 C106.5254 -170.4824 l106.5981 -170.5864 106.6772 -170.6362 106.7627 -170.6323 c106.8481 -170.6284 106.9824 -170.5625 107.166 -170.4336 c107.5117 -170.1914 107.751 -169.9326 107.8843 -169.6577 c108.0181 -169.3828 108.0522 -169.019 107.9873 -168.5664 C108.1382 -168.4609 L108.6348 -169.6357 lb*U*u109.4458 -169.0142 m109.355 -168.8916 l109.5562 -168.7402 109.6631 -168.6099 109.6768 -168.5015 c109.6899 -168.3931 109.6499 -168.2754 109.5557 -168.1484 C107.8594 -165.8628 l107.7617 -165.7314 107.6626 -165.6704 107.563 -165.6802 c107.4629 -165.6899 107.3198 -165.7539 107.1343 -165.8726 C107.0435 -165.75 L108.3823 -164.7568 L111.082 -166.21 L111.126 -166.1772 L110.5117 -163.1758 L111.8506 -162.1826 L111.9414 -162.3047 l111.771 -162.4507 111.6704 -162.5723 111.6401 -162.6689 c111.6099 -162.7656 111.6641 -162.9072 111.8027 -163.0938 C113.3818 -165.2212 l113.5132 -165.3984 113.6323 -165.4902 113.7388 -165.4961 c113.8452 -165.5024 113.9907 -165.4419 114.1748 -165.3145 C114.2656 -165.437 L112.5015 -166.7461 L112.4111 -166.624 l112.5649 -166.5024 112.6655 -166.3906 112.7129 -166.2881 c112.7607 -166.1865 112.7305 -166.062 112.6221 -165.9165 C110.8755 -163.5625 L110.8364 -163.5913 L111.6353 -167.3892 L111.4927 -167.4951 L108.1182 -165.6963 L108.0947 -165.7139 L109.7124 -167.8936 l109.8311 -168.0537 109.9507 -168.146 110.0708 -168.1709 c110.1914 -168.1958 110.3667 -168.1284 110.5977 -167.9697 C110.6885 -168.0918 L109.4458 -169.0142 lb*U*u117.0571 -164.5068 m117.0449 -164.355 l117.2964 -164.3335 117.4565 -164.2808 117.5254 -164.1963 c117.5942 -164.1113 117.623 -163.9907 117.6108 -163.833 C117.3931 -160.9951 l117.3804 -160.8315 117.3291 -160.7275 117.2393 -160.6821 c117.1494 -160.6372 116.9946 -160.6157 116.7744 -160.6167 C116.7627 -160.4648 L118.4248 -160.3374 L119.9355 -163.0054 L119.9902 -163.001 L121.0693 -160.1343 L122.7314 -160.0063 L122.7432 -160.1587 l122.521 -160.1914 122.3716 -160.2402 122.2944 -160.3057 c122.2173 -160.3716 122.1875 -160.52 122.2056 -160.752 C122.4082 -163.394 l122.4253 -163.6138 122.4771 -163.7549 122.564 -163.8164 c122.6509 -163.8784 122.8062 -163.9048 123.0303 -163.8955 C123.0415 -164.0474 L120.8511 -164.2153 L120.8398 -164.0635 l121.0347 -164.043 121.1797 -164.0015 121.2739 -163.9404 c121.3687 -163.8794 121.4092 -163.7583 121.3955 -163.5776 C121.1709 -160.6548 L121.1226 -160.6587 L119.7754 -164.2979 L119.5986 -164.3115 L117.7007 -160.9922 L117.6719 -160.9941 L117.8794 -163.7007 l117.895 -163.8989 117.9468 -164.041 118.0352 -164.126 c118.124 -164.2114 118.3081 -164.248 118.5879 -164.2363 C118.5996 -164.3882 L117.0571 -164.5068 lb*U*u123.667 -160.0781 m125.9023 -160.0718 L125.9028 -160.2241 l125.6465 -160.2329 125.4756 -160.2695 125.3896 -160.334 c125.3032 -160.3984 125.2607 -160.5459 125.2612 -160.7764 C125.2671 -162.7822 l125.2676 -163.0864 125.3081 -163.3218 125.3882 -163.4873 c125.5337 -163.7954 125.8105 -163.9492 126.2197 -163.9478 c126.728 -163.9463 127.0713 -163.7744 127.249 -163.4326 c127.3477 -163.2451 127.3965 -162.9824 127.3955 -162.6445 C127.3906 -160.8115 l127.3896 -160.5967 127.3457 -160.4492 127.2583 -160.3682 c127.1709 -160.2876 127 -160.2388 126.7461 -160.2217 C126.7456 -160.0698 L128.1992 -160.0654 L128.1997 -160.2178 l127.9888 -160.2554 127.8496 -160.3013 127.7817 -160.355 c127.7139 -160.4092 127.6802 -160.5327 127.6807 -160.7261 C127.686 -162.6436 l127.6875 -163.1533 127.5532 -163.5469 127.2822 -163.8247 c127.0117 -164.103 126.5859 -164.2427 126.0044 -164.2441 c125.2441 -164.2461 124.7231 -164.0415 124.4419 -163.6304 c124.293 -163.4126 124.2178 -163.1304 124.2168 -162.7852 C124.2114 -160.7793 l124.2109 -160.5532 124.1777 -160.4106 124.1118 -160.3521 c124.0459 -160.2939 123.8975 -160.2534 123.6675 -160.23 C123.667 -160.0781 lb*U*u129.0454 -161.2456 m128.98 -160.0381 L132.9561 -159.8013 L133.0347 -161.0083 L132.8442 -161.0195 l132.7563 -160.5928 132.5605 -160.312 132.2568 -160.1772 c132.0864 -160.1035 131.8364 -160.0723 131.5073 -160.084 C131.6948 -163.2354 l131.7075 -163.4556 131.7588 -163.5991 131.8481 -163.666 c131.937 -163.7329 132.1162 -163.7583 132.3848 -163.7427 C132.394 -163.8945 L130.04 -164.0347 L130.0308 -163.8828 l130.2886 -163.8672 130.458 -163.8203 130.5386 -163.7422 c130.6191 -163.6646 130.6533 -163.5161 130.6396 -163.2979 C130.4526 -160.147 l130.1304 -160.1738 129.8857 -160.2344 129.7188 -160.3286 c129.4121 -160.5034 129.251 -160.8052 129.2358 -161.2344 C129.0454 -161.2456 lb*U*u134.7334 -160.5923 m134.7856 -160.5757 L135.8081 -161.7075 L134.582 -162.0957 l134.7334 -160.5923 Lb1 D135.1567 -163.397 m135.1108 -163.252 L134.9663 -163.2954 134.855 -163.3184 134.7769 -163.3208 c134.644 -163.3218 134.5645 -163.2817 134.5386 -163.1997 c134.5176 -163.1328 134.5112 -163.0171 134.52 -162.8525 c134.5249 -162.7749 134.5376 -162.6084 134.5581 -162.3521 c135.9751 -161.9038 L136.2446 -162.1992 L136.3037 -162.2646 136.3521 -162.3208 136.3896 -162.3682 c136.4517 -162.4492 136.4893 -162.5117 136.5034 -162.5566 c136.5347 -162.6548 136.522 -162.7266 136.4648 -162.7715 c136.4077 -162.8159 136.2778 -162.8745 136.0747 -162.9468 c136.1206 -163.0923 L138.1631 -162.4458 L138.1167 -162.3008 L137.9741 -162.3501 137.8486 -162.3379 137.7397 -162.2651 c137.6304 -162.1919 137.4438 -162.0122 137.1792 -161.7251 c134.8213 -159.167 L134.6455 -159.2227 L134.2344 -162.7954 L134.2021 -163.0781 134.167 -163.2646 134.1309 -163.3564 c134.0747 -163.501 133.9722 -163.6021 133.8232 -163.6592 c133.8691 -163.8047 l135.1567 -163.397 Lb*U*u0 D137.082 -159.8066 m136.4233 -158.7925 L139.752 -156.6045 L140.4214 -157.6113 L140.2622 -157.7163 l139.9731 -157.3901 139.6631 -157.2441 139.333 -157.2793 c139.1484 -157.3003 138.9165 -157.3979 138.6367 -157.5723 C140.3706 -160.21 l140.4917 -160.3945 140.6079 -160.4932 140.7188 -160.5068 c140.8291 -160.5205 140.9971 -160.4531 141.2222 -160.3052 C141.3057 -160.4326 L139.335 -161.728 L139.2515 -161.6011 l139.4673 -161.459 139.5908 -161.334 139.6216 -161.2261 c139.6523 -161.1182 139.6079 -160.9727 139.4878 -160.79 C137.7539 -158.1528 l137.4883 -158.3369 137.3066 -158.5112 137.2085 -158.6758 c137.0298 -158.98 137.041 -159.3223 137.2412 -159.7021 C137.082 -159.8066 lb*U*u143.4063 -157.2246 m143.1147 -157.1396 142.7788 -156.9619 142.3984 -156.6914 c142.0244 -156.4258 141.7485 -156.1704 141.5703 -155.9253 c141.2368 -155.4614 141.2148 -155.0259 141.5039 -154.6182 c141.7124 -154.3247 142.0093 -154.1865 142.395 -154.2031 c142.7808 -154.2192 143.2339 -154.4121 143.7544 -154.7817 c144.1333 -155.0508 144.4116 -155.3091 144.5898 -155.5571 c144.917 -156.0171 144.9375 -156.4487 144.6509 -156.8525 c144.3613 -157.2598 143.9463 -157.3843 143.4063 -157.2246 cb1 D140.8569 -156.2427 m140.9341 -156.8315 141.2295 -157.3076 141.7422 -157.6719 c142.207 -158.0015 142.7236 -158.1138 143.292 -158.0073 c143.8984 -157.8916 144.4063 -157.5454 144.8154 -156.9697 c145.2007 -156.4268 145.3628 -155.8618 145.3013 -155.2739 c145.2378 -154.6714 144.9492 -154.188 144.4351 -153.8228 c143.9214 -153.458 143.3696 -153.3447 142.7798 -153.4834 c142.2061 -153.6177 141.7256 -153.957 141.3394 -154.501 c140.9375 -155.0669 140.7769 -155.647 140.8569 -156.2427 cb*Uu0 D0 0.275 1 0.06 (PANTONE 124) 0.7 x1 w80.3276 -125.0654 m79.9126 -125.0015 79.9126 -124.5356 v79.9126 -124.0693 80.3262 -123.9297 y82.2393 -123.9297 l82.2275 -125.0654 l80.3276 -125.0654 lfU89.8013 -140.7466 m87.8965 -142.0132 L89.7798 -143.3125 L89.3228 -145.564 L91.5669 -145.1421 L92.8252 -147.0596 L94.1162 -145.1641 L96.353 -145.6245 L95.9409 -143.313 L97.8447 -142.0435 L95.9561 -140.7993 L96.4375 -138.5107 L94.1689 -138.9697 L92.8223 -137.0894 L91.6196 -138.9473 L89.3828 -138.4873 L89.8013 -140.7466 Lf69.2275 -127.3525 m67.3228 -128.6191 L69.2058 -129.9185 L68.7488 -132.1699 L70.9932 -131.7485 L72.2515 -133.6655 L73.5422 -131.77 L75.7793 -132.2305 L75.3667 -129.9189 L77.271 -128.6494 L75.3821 -127.4053 L75.8635 -125.1167 L73.5947 -125.5757 L72.2483 -123.6958 L71.0457 -125.5537 L68.8088 -125.0938 L69.2275 -127.3525 Lf110.3433 -127.3203 m108.4385 -128.5869 L110.3213 -129.8862 L109.8643 -132.1377 L112.1089 -131.7163 L113.3672 -133.6333 L114.6577 -131.7378 L116.8945 -132.1982 L116.4824 -129.8867 L118.3867 -128.6172 L116.4976 -127.373 L116.979 -125.0845 L114.7104 -125.5435 L113.3638 -123.6636 L112.1611 -125.5215 L109.9243 -125.0615 L110.3433 -127.3203 Lf1 g0.1569 w100.835 -132.7017 m100.835 -122.4834 l98.9092 -122.0269 98.082 -122.0342 v97.0596 -122.0435 94.2998 -122.3379 93.293 -123.144 C93.293 -123.8433 93.293 -132.3096 y95.0049 -131.8315 96.4707 -131.8315 v98.7153 -131.8315 100.835 -132.7017 yF102.731 -133.6323 m102.731 -123.6084 l102.2109 -123.1108 101.7397 -122.9263 V101.7397 -123.4316 101.7397 -132.9717 y102.6445 -133.3989 102.731 -133.6323 vf0 R1 0.79 0 0 (BLUE 072) 0 X0.4775 w98.4087 -129.8809 m96.8755 -129.3291 95.0684 -129.8994 yS98.4209 -128.1011 m96.8755 -127.6226 95.0771 -128.2158 yS98.4087 -126.4541 m97.0366 -126.1274 95.0771 -126.6665 yS98.4087 -124.751 m97.0366 -124.4243 95.0684 -125.0688 yS0 O0 0.275 1 0.06 (PANTONE 124) 0 x0 0.275 1 0.06 (PANTONE 124) 0 X0.4477 w84.1313 -149.7217 m83.8638 -150.043 83.9673 -150.4087 83.9141 -150.73 c83.8604 -151.0513 84.1724 -151.8296 84.6538 -152.2041 c85.1357 -152.5786 86.2153 -152.3892 85.7334 -152.5498 c85.252 -152.71 83.3477 -153.4746 83.3477 -153.9023 c83.3477 -154.3306 85.4126 -153.6201 85.5728 -153.7803 c85.7334 -153.9409 85.9204 -153.981 85.4375 -154.312 c84.9683 -154.6338 81.8774 -155.126 81.9102 -155.8623 c81.9419 -156.5654 82.0581 -158.3984 82.4331 -158.3447 C83.6089 -155.9932 88.1421 -154.6567 87.2319 -155.2788 C86.9966 -155.5264 85.1338 -156.9473 85.707 -157.8145 c85.9189 -158.1353 87.1206 -160.4746 87.3345 -160.5278 c87.5483 -160.5815 87.0059 -156.2544 90.0684 -155.2251 c91.189 -154.8486 86.7207 -158.272 92.6128 -162.729 C92.6128 -162.1636 92.6128 -155.0571 Y91.7847 -153.8291 90.4126 -152.5718 89.7705 -152.0903 c88.7769 -151.3452 87.1768 -150.936 86.4292 -150.8906 c84.3926 -150.7671 84.1313 -149.7217 ybu68.8149 -82.8086 m69.9041 -81.9683 70.4739 -81.6313 v70.9805 -81.332 71.9468 -80.603 72.3716 -80.2637 c72.6392 -80.0493 73.9065 -79.0552 73.5474 -79.0552 c71.8816 -79.1206 71.3301 -79.6514 V71.2766 -79.3301 72.5076 -77.3501 73.2031 -76.9756 C72.989 -76.708 72.8816 -76.5762 72.3469 -76.6011 c70.1177 -76.7031 69.2432 -78.688 68.6543 -79.1162 C68.3333 -79.0088 68.0098 -77.1772 67.9619 -76.9648 C67.3198 -77.3394 66.9197 -78.1016 66.835 -78.5273 c66.7595 -78.9063 66.7263 -80.9351 66.6743 -81.4175 c66.6438 -81.7031 66.8062 -82.9717 65.7605 -83.98 c65.3743 -84.3525 65.1396 -84.2422 65.0154 -84.2002 c64.6948 -84.0918 64.9084 -83.9858 65.1223 -83.772 c65.3364 -83.5576 65.8716 -82.7017 65.8181 -82.2734 c65.7646 -81.8452 65.3872 -80.7456 63.9451 -80.561 c63.1663 -80.4614 62.7141 -80.5073 62.2327 -80.9893 C62.7141 -81.3101 64.052 -81.8989 64.1057 -83.0225 c64.1592 -84.1465 63.0889 -85.1636 62.3933 -85.5381 c61.6975 -85.9126 60.3794 -86.1548 59.3501 -86.1548 c58.3047 -86.1548 57.6194 -86.0771 57.0854 -85.7192 c56.6692 -85.4399 56.5569 -84.877 56.9114 -84.4126 c57.2268 -83.9995 57.2385 -83.7881 57.3901 -84.2388 c57.6746 -85.084 58.9141 -84.8008 59.2629 -84.7612 c59.9514 -84.6836 60.8882 -83.8896 60.6411 -83.0142 c60.4895 -82.4756 60.2786 -81.644 58.3447 -81.644 c56.5789 -81.644 54.124 -82.7578 54.3853 -85.8936 c54.4607 -86.8003 55.4221 -88.5352 58.5852 -88.9058 c59.7766 -89.0991 60.3652 -89.0991 v61.1323 -89.1216 62.5869 -88.7266 v64.8223 -88.1196 75.4473 -80.8062 77.8916 -82.7134 C78.5933 -83.5107 78.1519 -84.1455 77.957 -84.3789 c77.8706 -84.4824 77.7485 -83.6724 77.0205 -83.5107 c76.4746 -83.3896 75.2715 -83.8101 75.3091 -85.001 c75.3645 -86.7397 77.165 -86.7886 77.2705 -86.7905 c79.3286 -86.8286 80.1313 -84.6309 80.1313 -83.0786 c80.1313 -81.5269 79.269 -79.8389 77.0747 -79.8389 c75.323 -79.8389 74.2881 -80.3369 73.792 -80.6143 c73.2065 -80.9419 70.5767 -82.3716 69.7249 -82.8086 c68.948 -83.207 68.8684 -83.2905 y68.708 -83.1299 68.8149 -82.8086 ybUuuu1 O1 R49.6436 -129.1846 m49.76 -129.4121 50.0847 -129.6484 50.2644 -129.7642 c50.4578 -129.8882 53.1775 -130.9658 53.4707 -127.0483 c53.5762 -125.6382 52.2751 -121.5933 52.0334 -120.3853 c51.7722 -119.0786 51.6487 -115.8374 53.7476 -114.6714 C55.45 -113.8555 57.0217 -115.0508 57.1289 -116.335 c57.2361 -117.6196 56.5037 -117.8813 56.0835 -118.0337 c55.5081 -118.2422 54.1833 -117.9248 54.124 -116.9883 c53.6567 -118.1182 54.3628 -118.8628 v54.4812 -118.9878 54.8733 -119.2769 55.4668 -119.3872 C57.6746 -119.5669 58.2876 -118.4614 58.5576 -118.0215 c59.0405 -117.2349 59.1509 -116.3657 59.1328 -115.1807 c59.1089 -113.6196 57.9019 -111.5952 55.6006 -111.5952 C54.3306 -111.71 53.4602 -112.1304 53.0857 -112.8794 C52.6575 -112.1836 52.604 -111.7021 52.925 -111.1133 c53.2461 -110.5249 53.8347 -109.936 55.0122 -109.7222 C54.9585 -108.5981 52.7122 -108.0762 52.1758 -108.1167 c51.3657 -108.1777 51.3689 -108.2354 50.6775 -108.4912 C50.5703 -108.063 50.5178 -107.0801 51.7422 -106.3301 c54.6123 -104.5718 56.1792 -108.1563 56.2429 -106.7788 c56.345 -104.5767 58.5662 -104.4458 Y58.2539 -106.3301 58.3835 -106.5645 V58.541 -107.2266 60.0425 -108.5444 60.5242 -110.043 c61.0059 -111.5415 60.8987 -112.3975 60.4707 -113.5215 C60.5242 -114.0034 60.6313 -114.0034 Y61.1665 -113.3613 61.541 -112.2905 61.7014 -111.2739 c61.8621 -110.2573 62.2495 -108.3823 61.1792 -104.3154 c60.1089 -100.248 57.6882 -99.5542 57.2063 -99.5542 c56.5293 -99.5542 56.0325 -99.8071 55.7612 -100.0894 c55.5239 -100.3364 55.2568 -100.9033 55.5898 -101.3325 c55.7979 -101.6011 56.0835 -101.4487 56.2964 -101.1597 c56.6121 -100.7314 57.0876 -100.7197 57.4087 -100.7729 c57.7297 -100.8267 58.3047 -101.2441 58.3047 -101.833 c58.3047 -102.4214 57.6294 -103.5552 56.345 -103.6621 c55.0608 -103.769 53.9668 -102.7959 53.8062 -102.4751 c53.6455 -102.1538 53.2568 -99.9443 53.3401 -99.6118 c54.124 -96.4761 57.4155 -95.8638 57.3667 -93.7212 c57.3389 -92.4946 57.1289 -92.4712 56.9983 -91.7725 c56.7017 -90.187 57.782 -89.0293 y58.1567 -89.0825 60.345 -89.3281 61.0408 -89.3281 C61.604 -90.6372 63.4612 -91.4473 v64.6677 -91.9731 65.1958 -91.9189 65.9448 -91.7046 C65.9983 -92.0791 65.833 -92.2949 65.4634 -92.4902 c64.5466 -92.9741 64.7068 -93.3105 64.7068 -93.4712 c64.7068 -93.6318 66.052 -94.4702 66.052 -96.5039 C65.6775 -96.3965 63.9006 -94.5933 62.6162 -94.647 C62.2952 -94.9146 62.7256 -95.2559 62.8948 -95.6475 c63.0615 -96.0332 63.3228 -96.7178 63.3228 -97.3599 C62.7341 -97.0391 61.9851 -96.5571 61.2356 -96.5571 c60.4866 -96.5571 59.3628 -97.2529 59.3628 -97.6274 C60.219 -98.3765 63.6975 -100.0894 64.6074 -103.5679 c65.5168 -107.0464 65.1423 -111.7554 64.3396 -114.0034 c63.5369 -116.251 62.0386 -119.3013 58.8811 -120.4785 C57.782 -120.8516 57.0591 -120.7349 56.8474 -120.6929 c56.1572 -120.5552 55.4026 -120.104 55.1885 -119.9971 C55.0281 -120.2109 55.3972 -121.1367 56.033 -122.2505 c56.4463 -122.9751 57.1777 -124.1479 59.0266 -124.3413 C60.3376 -124.3687 61 -122.7168 59.9272 -122.3672 C59.9375 -122.8647 59.813 -123.0444 59.3994 -123.2651 c59.0496 -123.4512 58.6226 -123.2178 58.4619 -122.9502 c58.3015 -122.6826 58.3098 -121.9468 58.6953 -121.6211 c58.9983 -121.3643 59.2021 -121.1206 60.0583 -121.1743 c60.9146 -121.228 62.1694 -122.8755 61.1792 -124.4355 c60.9585 -124.7827 60.4028 -125.6577 59.1509 -125.7622 c58.2429 -125.8384 56.7175 -125.2441 56.1152 -124.7139 c55.5356 -124.2031 55.5356 -123.9272 54.8674 -123.9033 C54.4929 -124.3315 56.1025 -125.667 56.4326 -125.873 c57.7212 -126.6758 58.2793 -126.7983 59.6113 -127.1792 c61.0684 -127.5957 61.1821 -128.292 61.6104 -129.3086 C60.9683 -129.3086 60.7473 -129.3628 60.219 -129.4692 c59.731 -129.5674 59.4646 -129.853 59.4163 -130.0044 C58.9714 -131.4473 59.5098 -133.3516 59.6616 -134.4282 C59.4575 -134.9209 57.3708 -135.7251 56.7913 -134.6992 C57.3938 -133.9092 58.0608 -132.6616 57.5779 -131.0195 C56.9155 -129.3086 55.9221 -128.9912 Y55.4392 -130.1367 54.8457 -130.6748 V54.4319 -131.1299 53.1458 -132.231 50.7664 -131.8115 c49.7954 -131.6406 48.7695 -130.7798 48.3328 -129.9712 cBU48.4016 -130.0952 m48.25 -129.8882 48.0881 -129.3633 48.0706 -129.019 c48.0408 -128.4365 48.1809 -126.397 50.115 -126.1987 c51.217 -126.0859 51.9895 -126.7583 51.9895 -127.7217 c51.9895 -128.6851 51.0098 -128.9497 50.4441 -128.7842 c50.2783 -128.7358 49.7769 -128.2695 49.9663 -127.7305 c50.0713 -127.4321 49.5193 -127.7495 49.478 -128.3149 c49.4507 -128.688 49.5193 -128.8809 49.6436 -129.1846 cBU0 O0 R53.9626 -102.6909 m52.6787 -99.9565 52.5659 -99.8677 V52.1807 -98.9526 51.7954 -98.519 51.9397 -97.7002 c52.0842 -96.8818 52.8467 -96.5483 53.28 -96.0664 C52.9429 -95.6812 52.2871 -95.605 52.1655 -95.666 c52.0256 -95.7358 50.458 -96.0664 50.9285 -98.4712 C49.7524 -97.125 49.342 -97.144 48.6943 -97.2422 c48.481 -97.2749 47.6182 -97.3447 47.0481 -98.3008 C47.8669 -98.4932 49.1465 -98.8564 49.1465 -99.3379 C48.8091 -99.6753 47.636 -100.6377 47.5569 -101.3125 c47.4316 -102.3818 47.9446 -102.6851 48.2312 -102.8057 C48.4719 -101.457 49.0874 -100.8662 49.7244 -100.7827 c50.2981 -100.7075 50.9895 -100.6982 51.9397 -101.2163 c52.9995 -101.7944 53.9626 -102.6909 ybU0.4521 w91.2051 -74.6382 m91.6743 -73.1895 92.6509 -72.6436 V93.0723 -78.5815 91.3462 -80.4409 v89.6309 -82.2876 87.8838 -82.4653 86.9927 -82.6836 c83.2607 -83.5972 81.6929 -84.1636 80.396 -85.1904 C80.6929 -80.0776 80.2642 -78.5933 84.4966 -76.6245 C84.5298 -76.7236 83.4663 -79.0044 83.3252 -80.2983 c83.271 -80.7925 83.271 -80.7925 y83.4229 -80.9302 83.7681 -80.8613 83.9194 -80.6226 c84.0488 -80.4189 86.1128 -77.416 87.3662 -77.2183 C87.4653 -77.3174 86.8384 -77.9438 86.6079 -78.4717 c86.4517 -78.8286 86.3281 -79.4761 86.5488 -79.6318 c86.9131 -79.8887 87.4487 -79.7139 87.855 -79.4883 c88.0674 -79.3706 89.4316 -78.6772 89.3237 -76.1372 C89.2598 -75.9404 89.0718 -75.2183 88.1348 -75.0566 C88.3179 -74.5273 88.8159 -74.3276 89.3857 -74.4961 c90.0073 -74.6797 90.5664 -75.2729 90.8906 -75.3267 C91.2051 -74.6382 lb0.4477 w101.5181 -149.7402 m101.7856 -150.061 101.6821 -150.4272 101.7358 -150.7485 c101.7891 -151.0693 101.4771 -151.8477 100.9956 -152.2222 c100.5137 -152.5972 99.4346 -152.4072 99.916 -152.5679 c100.3975 -152.7285 102.3018 -153.4927 102.3018 -153.9209 c102.3018 -154.3491 100.2373 -153.6382 100.0767 -153.7988 c99.916 -153.9595 99.729 -153.999 100.2119 -154.3306 c100.6812 -154.6523 103.772 -155.1445 103.7393 -155.8809 c103.7075 -156.584 103.5913 -158.4165 103.2163 -158.3628 C102.0405 -156.0112 97.5073 -154.6753 98.4175 -155.2974 C98.6528 -155.5449 100.5156 -156.9658 99.9424 -157.8325 c99.7305 -158.1533 98.5293 -160.4927 98.3149 -160.5464 c98.1011 -160.5996 98.6436 -156.2725 95.5811 -155.2437 c94.4604 -154.8672 98.9287 -158.2905 93.0366 -162.7476 C93.0366 -162.1816 93.0366 -155.0757 Y93.8647 -153.8472 95.2368 -152.5903 95.8794 -152.1089 c96.8726 -151.3638 98.4722 -150.9541 99.2202 -150.9092 c101.2568 -150.7852 101.5181 -149.7402 ybu116.8345 -82.8271 m115.7456 -81.9863 115.1753 -81.6499 v114.6689 -81.3506 113.7026 -80.6216 113.2778 -80.2817 c113.0107 -80.0679 111.7432 -79.0737 112.1021 -79.0737 c113.7681 -79.1387 114.3193 -79.6699 V114.373 -79.3486 113.1421 -77.3687 112.4463 -76.9941 C112.6602 -76.7261 112.7681 -76.5947 113.3027 -76.6191 c115.5317 -76.7217 116.4063 -78.7065 116.9951 -79.1343 C117.3159 -79.0273 117.6396 -77.1958 117.6875 -76.9829 C118.3296 -77.3579 118.73 -78.1201 118.8145 -78.5459 c118.8901 -78.9248 118.9233 -80.9536 118.9751 -81.4355 c119.0059 -81.7217 118.8433 -82.9902 119.8892 -83.9985 c120.2754 -84.3711 120.5098 -84.2607 120.6343 -84.2183 c120.9546 -84.1099 120.7412 -84.0044 120.5273 -83.7905 c120.313 -83.5762 119.7778 -82.7202 119.8315 -82.292 c119.8848 -81.8638 120.2622 -80.7642 121.7046 -80.5796 c122.4829 -80.4795 122.9355 -80.5259 123.417 -81.0078 C122.9355 -81.3286 121.5972 -81.9175 121.5439 -83.041 c121.4902 -84.165 122.5605 -85.1816 123.2563 -85.5566 c123.9521 -85.9312 125.27 -86.1733 126.2993 -86.1733 c127.3447 -86.1733 128.0303 -86.0957 128.564 -85.7378 c128.9805 -85.4585 129.0928 -84.895 128.7383 -84.4312 c128.4229 -84.0181 128.4111 -83.8062 128.2593 -84.2568 c127.9751 -85.1021 126.7354 -84.8188 126.3867 -84.7798 c125.6982 -84.7021 124.7612 -83.9077 125.0083 -83.0322 c125.1602 -82.4941 125.3711 -81.6621 127.3047 -81.6621 c129.0708 -81.6621 131.5254 -82.7764 131.2642 -85.9121 c131.1885 -86.8184 130.2275 -88.5532 127.0645 -88.9243 c125.873 -89.1177 125.2842 -89.1177 v124.5171 -89.1401 123.0625 -88.7451 v120.8271 -88.1377 110.2021 -80.8247 107.7578 -82.7319 C107.0562 -83.5293 107.4976 -84.1641 107.6929 -84.3975 c107.7788 -84.501 107.9009 -83.6909 108.6294 -83.5293 c109.1748 -83.4082 110.3779 -83.8286 110.3403 -85.0195 c110.2852 -86.7578 108.4849 -86.8071 108.3789 -86.8091 c106.3208 -86.8472 105.5181 -84.6489 105.5181 -83.0972 c105.5181 -81.5454 106.3804 -79.8574 108.5747 -79.8574 c110.3262 -79.8574 111.3613 -80.3555 111.8574 -80.6328 c112.4429 -80.96 115.0728 -82.3901 115.9248 -82.8271 c116.7017 -83.2256 116.7808 -83.3086 y116.9414 -83.1479 116.8345 -82.8271 ybU129.8691 -132.0166 m132.7354 -134.7085 132.0869 -137.0405 v132.0352 -137.2261 131.6318 -138.8896 129.3516 -139.3687 C128.9766 -139.208 128.6582 -138.6313 128.3379 -138.6069 c127.6421 -138.5532 126.0234 -141.2734 125.6567 -141.8286 C125.2773 -142.416 124.5254 -143.5161 124.5254 -144.0513 c124.5254 -144.5864 126.7783 -142.9746 127.6611 -142.0918 c128.5444 -141.2085 128.2837 -140.2627 129.0332 -140.2627 C129.1934 -140.9585 129.0684 -141.5156 129.229 -141.5693 c129.3896 -141.6226 130.96 -139.998 132.0303 -140.2124 c133.1006 -140.4263 134.4849 -142.001 134.3242 -143.0713 C133.9727 -143.3252 132.2959 -142.3765 131.8682 -142.3208 c131.4878 -142.271 131.0073 -142.3926 131.1885 -142.8755 C131.6167 -143.0898 133.0488 -144.7759 132.626 -145.0313 c132.2031 -145.2866 132.0732 -144.3955 128.9678 -144.4434 C127.0503 -144.5884 126.4209 -145.4902 126.4419 -146.1855 c126.4546 -146.6167 126.5352 -147.0181 126.79 -147.1001 c127.252 -147.248 127.8716 -147.2632 129.5884 -146.9258 c131.0596 -146.6362 131.084 -146.3164 131.0254 -146.9585 c130.9927 -147.3179 129.7515 -147.7744 129.7515 -148.3628 c129.7515 -148.9517 132.9009 -149.7168 130.5356 -152.9355 C129.3159 -154.2422 126.6978 -154.3105 126.0498 -153.981 C125.8892 -153.6597 127.918 -152.6953 127.6611 -151.4116 c127.6177 -151.1934 127.1821 -150.1919 125.9629 -150.105 c125.2256 -150.0522 125.8755 -151.542 124.3076 -151.6729 C124.3076 -149.6802 123.2842 -149.7676 y122.729 -149.6694 121.3652 -150.1631 v120.3574 -150.5278 119.5991 -150.6982 119.2778 -151.394 c118.957 -152.0898 119.2241 -151.7686 119.7061 -151.7686 c120.1875 -151.7686 120.7476 -151.3916 121.3901 -151.4985 c122.0322 -151.6055 122.6665 -152.3169 122.8271 -153.0664 c122.9878 -153.8154 123.1074 -155.4653 122.3047 -155.6792 c121.9126 -154.1113 119.6914 -153.1968 v119.0464 -152.9312 118.0952 -152.9531 117.0786 -153.3276 c116.0615 -153.7021 112.3745 -155.48 108.6821 -155.48 c104.9893 -155.48 102.5205 -152.7529 102.0459 -151.7339 c100.3555 -148.1016 102.9023 -145.9375 104.6665 -146.0112 c107.8022 -146.1416 108.0527 -148.4907 107.9331 -149.0161 c107.8008 -149.5947 107.5986 -150.811 106.1133 -150.541 c105.1606 -150.3677 105.0874 -149.0522 y104.2134 -149.1992 104.2017 -150.0762 104.2402 -150.314 c104.4526 -151.6304 105.9263 -151.9985 106.7305 -152.127 c107.3286 -152.2227 108.3809 -152.2466 109.1099 -152.0928 c114.0933 -151.52 117.209 -149.5386 v121.0527 -147.0947 122.0786 -145.2646 123.4805 -142.2222 C125.3164 -138.4575 126.1396 -133.6187 y127.9336 -135.0938 127.8403 -135.1182 v130.1001 -134.5156 129.8691 -132.0166 yb55.78 -131.9985 m52.9138 -134.6904 53.5625 -137.022 v53.614 -137.208 54.0178 -138.8711 56.2979 -139.3501 C56.6726 -139.1895 56.9915 -138.6133 57.3115 -138.5884 c58.0073 -138.5352 59.626 -141.2549 59.9927 -141.8105 C60.3721 -142.3975 61.124 -143.498 61.124 -144.0332 c61.124 -144.5679 58.8713 -142.9561 57.9883 -142.0732 c57.1052 -141.1904 57.3657 -140.2441 56.6165 -140.2441 C56.4561 -140.9399 56.5811 -141.4971 56.4204 -141.5508 c56.26 -141.604 54.6895 -139.98 53.6191 -140.1938 c52.5486 -140.4082 51.1646 -141.9829 51.3252 -143.0532 C51.6765 -143.3071 53.3535 -142.3584 53.7813 -142.3022 c54.1616 -142.2529 54.6423 -142.374 54.4607 -142.8574 C54.0327 -143.0713 52.6006 -144.7578 53.0237 -145.0127 c53.4463 -145.2681 53.5762 -144.377 56.6819 -144.4248 C58.5991 -144.5698 59.2285 -145.4717 59.2078 -146.167 c59.1948 -146.5981 59.114 -147 58.8594 -147.0815 c58.3975 -147.2295 57.7778 -147.2451 56.0613 -146.9072 c54.5901 -146.6177 54.5657 -146.2983 54.624 -146.9399 c54.6567 -147.2993 55.8979 -147.7559 55.8979 -148.3442 c55.8979 -148.9331 52.7485 -149.6982 55.114 -152.9175 C56.3335 -154.2236 58.9517 -154.292 59.5996 -153.9624 C59.7603 -153.6411 57.7317 -152.6768 57.9883 -151.3931 c58.0317 -151.1753 58.4673 -150.1733 59.6868 -150.0864 c60.4241 -150.0337 59.7737 -151.5234 61.3418 -151.6543 C61.3418 -149.6616 62.365 -149.749 y62.9204 -149.6509 64.2844 -150.145 v65.2922 -150.5093 66.0505 -150.6802 66.3716 -151.3755 c66.6926 -152.0713 66.4253 -151.75 65.9434 -151.75 c65.4619 -151.75 64.9016 -151.373 64.2595 -151.48 c63.6172 -151.5869 62.9829 -152.2988 62.8225 -153.0479 c62.6619 -153.7974 62.5422 -155.4468 63.345 -155.6611 c63.7368 -154.0928 65.958 -153.1787 v66.6033 -152.9126 67.5542 -152.9346 68.571 -153.3091 c69.5879 -153.6836 73.2751 -155.4614 76.9678 -155.4614 c80.6602 -155.4614 83.1294 -152.7344 83.6035 -151.7158 c85.2944 -148.083 82.7471 -145.9194 80.9829 -145.9927 c77.8472 -146.1235 77.5967 -148.4727 77.7168 -148.998 c77.8486 -149.5767 78.0508 -150.7925 79.5361 -150.5225 c80.4888 -150.3491 80.562 -149.0337 y81.436 -149.1807 81.4478 -150.0581 81.4092 -150.2959 c81.1968 -151.6118 79.7231 -151.98 78.9189 -152.1084 c78.3208 -152.2041 77.2686 -152.228 76.5396 -152.0742 c71.5559 -151.5015 68.4402 -149.5205 v64.5969 -147.0762 63.571 -145.2461 62.1692 -142.2041 C60.333 -138.439 59.5098 -133.6001 y57.7161 -135.0752 57.8091 -135.1001 v55.5496 -134.4971 55.78 -131.9985 yb0.4521 w94.4443 -74.6567 m94.0083 -73.1763 93.0317 -72.6304 V92.5767 -78.6001 94.3032 -80.459 v96.0181 -82.3062 97.7656 -82.4834 98.6572 -82.7021 c102.3887 -83.6157 103.9565 -84.1821 105.2534 -85.2085 C104.957 -80.0962 105.3857 -78.6118 101.1528 -76.6431 C101.1196 -76.7417 102.1831 -79.0225 102.3242 -80.3169 c102.3784 -80.811 102.3784 -80.811 y102.2266 -80.9487 101.8818 -80.8799 101.73 -80.6411 c101.6006 -80.437 99.5366 -77.4346 98.2832 -77.2368 C98.1841 -77.3354 98.811 -77.9624 99.042 -78.4897 c99.1982 -78.8472 99.3213 -79.4941 99.1006 -79.6499 c98.7363 -79.9067 98.2007 -79.7324 97.7944 -79.5068 c97.5825 -79.3887 96.2178 -78.6958 96.3262 -76.1558 C96.3896 -75.9585 96.5781 -75.2363 97.5151 -75.0752 C97.3315 -74.5459 96.8335 -74.3457 96.2637 -74.5142 c95.6421 -74.6982 95.083 -75.291 94.7588 -75.3452 C94.4443 -74.6567 lbu0 0.275 1 0.06 (PANTONE 124) 0.7 x0 0.91 0.66 0.06 (PANTONE 186) 0 X0.1137 w77.5576 -101.1519 m77.8301 -101.2441 78.5693 -101.9136 78.7456 -102.1064 C79.4521 -101.9136 85.6577 -98.8872 86.0933 -98.3647 C86.4463 -97.835 86.4521 -97.3174 86.6157 -97.4067 c87.5737 -97.9292 88.0093 -97.2324 88.7061 -96.5356 c89.6104 -95.6318 90.3428 -94.8818 90.4604 -94.7373 C91.6963 -94.7373 104.3926 -94.7314 y107.3506 -94.814 107.5859 -93.6582 V107.7046 -92.5371 106.2373 -92.3516 105.0605 -92.3516 c103.8828 -92.3516 100.5981 -92.7993 99.3491 -93.2031 C98.2305 -93.4922 97.1499 -94.041 95.7959 -94.041 c94.4419 -94.041 92.2261 -93.6367 91.9907 -92.1436 c91.7554 -90.6504 92.6973 -90.0728 93.9922 -89.7354 c95.2876 -89.3984 95.0518 -89.7354 94.8164 -89.4946 c94.5811 -89.2539 94.6201 -89.2627 94.6401 -88.9648 c94.7163 -87.8257 96.2485 -87.1289 96.7192 -87.1289 c97.1904 -87.1289 95.5874 -88.5225 96.1113 -89.4468 c96.23 -89.6558 96.2842 -88 99.6807 -88.1738 c100.1611 -88.1987 96.7744 -90.335 97.1709 -90.2651 c99.1582 -89.916 99.2183 -90.9502 97.6421 -91.5176 c97.3701 -91.6157 95.3208 -91.8867 95.6743 -91.7451 c96.1099 -91.5708 96.5327 -91.2261 96.5688 -90.8477 c96.6323 -90.1772 95.2441 -90.4399 94.9546 -90.4951 c94.6504 -90.5527 93.4404 -90.8013 93.3813 -91.7646 C93.4243 -92.3501 94.1265 -92.7578 95.1201 -92.8408 C97.1074 -92.7764 97.5625 -92.4546 98.2524 -92.2476 c99.0781 -91.9995 102.291 -90.9834 104.7061 -90.9326 c107.1387 -90.8813 108.7051 -91.3281 109.3281 -92.1772 c110.2861 -93.4839 110.0015 -94.522 109.5894 -95.0518 c109.1777 -95.5811 107.4727 -95.9414 y107.4727 -96.6157 107.8262 -97.0972 108.1206 -97.3384 c108.415 -97.5791 109.8462 -98.1001 110.1992 -98.1001 c110.5522 -98.1001 111.7876 -97.998 111.7876 -98.1904 c111.7876 -98.3833 111.2651 -98.8872 110.4814 -99.3228 c110.2646 -99.4434 109.8716 -100.8906 y110.6348 -102.0195 l107.3247 -103.5005 108.8926 -103.7617 v110.1929 -103.9785 110.147 -104.6938 110.1221 -105.0444 C110.0776 -105.3423 109.5942 -105.7651 109.2412 -105.7651 c108.8877 -105.7651 108.0522 -105.4351 107.9346 -105.2422 C107.5386 -105.7012 107.166 -106.4741 106.541 -106.4619 c105.9502 -106.4502 105.0825 -105.853 105.0605 -105.2422 c105.0435 -104.7866 105.5933 -104.1831 106.0186 -104.0229 C105.8276 -103.8384 104.0479 -103.9902 104.9731 -102.6294 c105.3462 -102.0806 106.2832 -102.3345 106.6279 -102.8037 c106.9214 -103.2031 107.2583 -101.7617 y107.6733 -100.1904 l105.124 -100.2871 104.7119 -100.1904 v104.2998 -100.0942 103.3608 -99.9619 102.3599 -98.71 c101.3594 -97.4575 101.3833 -97.2681 100.6182 -97.3164 c99.853 -97.3643 97.9419 -97.769 96.1758 -99.4067 C94.8945 -101.2515 92.4307 -100.7134 91.4023 -100.1318 c90.6323 -99.6963 90.8726 -100.1797 90.6958 -99.8428 c90.519 -99.5054 90.2246 -98.5903 89.9893 -98.5903 c89.7539 -98.5903 89.5771 -98.9277 89.6362 -99.1685 c89.6948 -99.4092 89.9844 -99.8179 89.9258 -100.1069 c89.8667 -100.396 89.9893 -100.9023 89.5186 -101.0947 c89.0474 -101.2876 89.1182 -102.7197 88.7061 -102.7197 c88.2939 -102.7197 87.0889 -101.8008 86.4414 -101.8486 c85.7939 -101.897 84.7915 -102.1807 84.4385 -102.8071 C83.4375 -102.8071 81.3896 -102.6328 81.564 -104.1133 C80.3447 -103.5034 79.7466 -103.3584 79.5112 -104.0327 c79.2754 -104.7075 80.1685 -105.5938 78.6895 -105.7681 c78.29 -105.8154 77.8198 -105.4019 77.7451 -105.189 c77.5957 -104.7627 77.8242 -104.25 77.5576 -104.3745 c76.4087 -104.9116 75.7283 -104.7231 y75.1946 -104.7769 74.0886 -103.4282 75.7283 -102.981 c76.4346 -102.7886 76.8618 -102.7808 y75.9673 -102.3896 76.0767 -101.7617 v76.2974 -100.4946 77.5576 -101.1519 yb81.8252 -97.3193 m83.3984 -98.5991 l79.9146 -100.5151 l80.0269 -100.2251 78.8691 -99.3828 v77.9492 -98.7129 76.1201 -98.7129 y77.4854 -98.1255 77.1406 -97.9746 v76.5854 -97.7314 75.9268 -97.0815 75.908 -97.3794 c75.9121 -97.3115 74.0493 -99.5195 73.4636 -97.1455 c73.1648 -95.9346 74.8015 -96.1787 75.0369 -95.9858 C74.9192 -95.5522 74.2476 -96.2744 73.7251 -95.229 c73.0908 -93.9609 74.4216 -93.313 75.1187 -93.3999 c76.0713 -93.519 75.9043 -94.6587 76.1396 -94.8032 c76.3755 -94.9478 76.2017 -94.1519 76.9468 -94.041 C77.416 -94.0273 77.6064 -94.168 77.8452 -94.4165 c77.8887 -94.4614 77.9282 -94.5107 77.9648 -94.5625 c78.2002 -94.8994 78.1411 -95.0923 78.0234 -95.5737 c77.9058 -96.0552 77.5527 -95.959 77.6113 -96.1035 c77.6704 -96.248 78.2588 -96.874 78.6123 -97.0669 c78.9653 -97.2593 80.4316 -97.7549 y81.8252 -97.3193 lb99.5068 -98.7129 m99.8276 -98.7129 100.6392 -98.5391 y101.3359 -99.6714 102.207 -100.1069 v102.3794 -100.1929 101.6841 -101.1519 102.5552 -101.7617 c102.7358 -101.8882 101.1694 -101.5938 100.6392 -101.8486 c99.894 -102.2065 99.4253 -103.1348 98.5483 -103.6782 c97.3545 -104.418 98.749 -105.3662 98.3745 -105.4199 c97.9995 -105.4731 96.8613 -104.77 96.647 -104.77 c96.4331 -104.77 95.5767 -105.0376 95.5767 -105.4121 c95.5767 -105.7871 96.2793 -106.7085 95.0415 -107.0176 c94.4102 -107.1758 93.8506 -106.8188 93.8091 -106.0874 C93.2969 -106 93.0225 -106.4189 y92.5532 -106.9438 91.7705 -106.8384 91.5806 -105.9424 c91.5322 -105.7148 91.4063 -104.7231 92.8477 -104.6631 c93.2788 -104.645 93.2754 -104.8237 93.3828 -104.6631 c93.4897 -104.5024 92.3779 -104.1396 92.5386 -103.7651 c92.6992 -103.3906 92.8872 -102.6328 93.9712 -103.1113 c94.561 -103.3711 94.6782 -103.5073 94.7739 -103.5928 c94.8936 -103.7002 98.2002 -101.2393 y97.8501 -101.0347 97.416 -100.8906 v97.0249 -100.7607 96.4048 -101.0576 96.458 -100.6294 c96.5117 -100.2012 99.1855 -98.7129 99.5068 -98.7129 cb84.3276 -95.7192 m84.4121 -95.9043 85.4473 -96.4282 85.9805 -96.2744 c86.1235 -96.2329 85.8545 -97.8096 84.2197 -97.7441 c82.585 -97.6787 82.3794 -95.9043 82.603 -96.0781 c82.9575 -96.3545 84.3276 -95.7192 yb81.2007 -95.4165 m81.6597 -95.8364 82.123 -96.0601 82.1152 -95.9653 c82.1348 -96.2002 81.7847 -96.7148 81.4546 -96.8218 c81.124 -96.9287 80.6621 -96.6079 80.6621 -96.2329 c80.6621 -95.8584 81.2007 -95.4165 yb87.2285 -95.5288 m86.769 -95.9482 86.3062 -96.1719 86.314 -96.0776 c86.2939 -96.3125 86.6445 -96.8267 86.9746 -96.9336 c87.3047 -97.041 87.7671 -96.7197 87.7671 -96.3452 c87.7671 -95.9707 87.2285 -95.5288 yb79.2793 -92.3364 m79.2529 -92.958 79.3794 -93.4561 79.4463 -93.3896 c79.2793 -93.5557 78.6602 -93.6182 78.3657 -93.4341 c78.0718 -93.25 78.0205 -92.689 78.3076 -92.4482 c78.5942 -92.2075 79.2793 -92.3364 yb89.5078 -92.3364 m89.5342 -92.958 89.4082 -93.4561 89.3408 -93.3896 c89.5078 -93.5557 90.127 -93.6182 90.4214 -93.4341 c90.7158 -93.25 90.7671 -92.689 90.48 -92.4482 c90.1929 -92.2075 89.5078 -92.3364 ybu84.2466 -93.9521 m84.75 -93.9536 85.2114 -93.8428 85.3213 -93.7324 c85.6445 -93.4053 85.583 -93.0249 85.5728 -92.687 c85.5605 -92.2949 85.4287 -91.7397 y85.7852 -91.5952 86.9902 -91.3682 87.3672 -91.1851 c87.9063 -90.9238 87.6904 -92.0669 Y87.3345 -92.2598 86.1411 -92.5073 y86.1431 -92.7026 86.1772 -93.04 86.1411 -93.8789 c86.1304 -94.1284 85.7524 -94.4019 85.4878 -94.5977 c85.2534 -94.771 84.4458 -94.7285 y84.6914 -95.4204 85.5957 -95.3164 v85.9844 -95.2715 86.7666 -95.2793 87.2256 -94.8916 c87.5103 -94.6509 87.6567 -94.4019 y87.8701 -94.5464 87.9321 -94.792 88.2314 -94.9897 c88.6265 -95.251 88.6626 -95.2183 89.1426 -95.0815 c89.3462 -95.0234 89.5581 -94.3813 89.2734 -94.1406 c88.9883 -93.8994 89.0713 -93.9253 88.7861 -93.7808 c88.5015 -93.6367 88.4834 -93.5664 88.5547 -93.4219 c88.626 -93.2773 88.8135 -93.0527 88.8574 -92.9141 c88.9858 -92.5073 88.7471 -91.7822 89.0938 -91.7886 c90.4092 -91.8135 90.459 -90.123 89.5967 -89.9595 c88.1963 -89.6943 88.3374 -90.7739 88.1235 -90.6294 c87.9102 -90.4844 88.9502 -89.5244 87.8003 -88.8164 c87.0752 -88.3701 86.1924 -88.7148 y86.0679 -88.6875 85.5728 -89.4497 v85.4023 -89.7119 85.5146 -88.6172 85.0337 -88.3394 c84.7793 -88.1924 84.5337 -88.1079 84.3027 -88.0732 CB84.3691 -93.9521 m83.8652 -93.9536 83.4038 -93.8428 83.2944 -93.7324 c82.9712 -93.4053 83.0322 -93.0249 83.043 -92.687 c83.0547 -92.2949 83.1865 -91.7397 y82.8306 -91.5952 81.6255 -91.3682 81.2485 -91.1851 c80.7095 -90.9238 80.9248 -92.0669 Y81.2813 -92.2598 82.4746 -92.5073 y82.4727 -92.7026 82.438 -93.04 82.4746 -93.8789 c82.4854 -94.1284 82.8633 -94.4019 83.1279 -94.5977 c83.3618 -94.771 84.1699 -94.7285 y83.9238 -95.4204 83.02 -95.3164 v82.6313 -95.2715 81.8486 -95.2793 81.3901 -94.8916 c81.105 -94.6509 80.959 -94.4019 y80.7451 -94.5464 80.6831 -94.792 80.3838 -94.9897 c79.9888 -95.251 79.9531 -95.2183 79.4731 -95.0815 c79.2695 -95.0234 79.0571 -94.3813 79.3423 -94.1406 c79.627 -93.8994 79.5444 -93.9253 79.8291 -93.7808 c80.1143 -93.6367 80.1318 -93.5664 80.0605 -93.4219 c79.9893 -93.2773 79.8018 -93.0527 79.7578 -92.9141 c79.6294 -92.5073 79.8682 -91.7822 79.522 -91.7886 c78.2065 -91.8135 78.1563 -90.123 79.0186 -89.9595 c80.4189 -89.6943 80.2783 -90.7739 80.4917 -90.6294 c80.7056 -90.4844 79.6655 -89.5244 80.8154 -88.8164 c81.54 -88.3701 82.4233 -88.7148 y82.5474 -88.6875 83.043 -89.4497 v83.2129 -89.7119 83.1011 -88.6172 83.582 -88.3394 c83.8359 -88.1924 84.0815 -88.1079 84.3125 -88.0732 CBUU1 w80.3198 -127.0039 m79.9048 -126.9404 79.9048 -126.4741 v79.9048 -126.0078 80.3184 -125.8682 y82.2319 -125.8682 l82.2368 -127.0063 l80.3198 -127.0039 lf80.3267 -129.022 m79.9116 -128.9585 79.9116 -128.4922 v79.9116 -128.0259 80.3252 -127.8862 y82.2388 -127.8862 l82.2432 -129.0244 l80.3267 -129.022 lf80.3267 -130.9722 m79.9116 -130.9087 79.9116 -130.4424 v79.9116 -129.9761 80.3252 -129.8364 y82.2388 -129.8364 l82.2432 -130.9746 l80.3267 -130.9722 lf80.3267 -132.9409 m79.9116 -132.8774 79.9116 -132.4111 v79.9116 -131.9448 80.3252 -131.8052 y82.2388 -131.8052 l82.2432 -132.9434 l80.3267 -132.9409 lfLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF